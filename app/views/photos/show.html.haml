-#   Copyright (c) 2010, Diaspora Inc.  This file is
-#   licensed under the Affero General Public License version 3 or later.  See
-#   the COPYRIGHT file.

- content_for :head do
  = include_javascripts :photos

.span-16.append-4.prepend-4.last
  #photo_controls
    -if additional_photos && additional_photos.length > 1
      .right
        =link_to "← #{t('previous')}", previous_photo, :rel => 'prefetch', :id => 'photo_show_left'
        \/
        =link_to "#{t('next')} →", next_photo, :rel => 'prefetch',  :id => 'photo_show_right'

  #original_post_info
    = render 'shared/author_info', :person => photo.author, :post => photo

  #photo_container
    #show_photo{:data=>{:guid=>photo.id}}
      -if ownership
        = image_tag 'ajax-loader.gif', :id => "photo_spinner", :class => "hidden"
        = image_tag photo.url(:scaled_full)
      -else
        = image_tag photo.url(:scaled_full)

      #caption
        = photo.text

    - if ownership
      .photo_options{:data=>{:actor=>"#{photo.author.owner.id}", :actor_person => "#{photo.author.id}", :image_url => "#{photo.url(:thumb_large)}"}}
        = link_to t('.make_profile_photo'), photo_make_profile_photo_path(photo), :method => :put, :remote => true, :class => 'make_profile_photo'
        |
        = link_to t('.edit'), '#', :id => "edit_photo_toggle"
      %br

  %hr

  - if photo.status_message

    .span-8.last
      %p
        = markdownify(photo.status_message.text)
      %span{:style=>'font-size:smaller'}
        =link_to t('.collection_permalink'), photo.status_message
      %br
      %br

    .span-7.prepend-1
      .show_photo_attachments
        - for photo in additional_photos
          = link_to (image_tag photo.url(:thumb_small), :class => 'thumb_small'), object_path(photo)


    #photo_edit_options
      %h4= t('.edit_delete_photo')
      %p
        = form_for photo, :remote => true do |p|
          = p.text_field :text, :value => photo.text
          = p.submit t('.update_photo')
      %p
        = button_to t('.delete_photo'), photo, :confirm => t('are_you_sure'), :method => :delete

.span-16.prepend-4.append-4.last
  #photo_stream.stream.show
    // TODO(likes)
    /- if (defined?(current_user) && !current_user.liked?(@parent))
    /  %span.like_links
    /    = link_to t('shared.stream_element.like'), likes_path(:positive => 'true', :post_id => @parent.id), :method => :post, :class => "like_it", :remote => true
    /    |
    /    = link_to t('shared.stream_element.dislike'), likes_path(:positive => 'false', :post_id => @parent.id), :method => :post, :class => "dislike_it", :remote => true

    %div{:data=>{:guid=>parent.id}}
      .likes_container
        = render "likes/likes", :post_id => parent.id, :likes => parent.likes, :dislikes => parent.dislikes
      = render "comments/comments", :post => parent, :comments => parent.comments, :always_expanded => true
