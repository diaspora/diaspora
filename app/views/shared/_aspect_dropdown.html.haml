-#   Copyright (c) 2010-2011, Diaspora Inc.  This file is
-#   licensed under the Affero General Public License version 3 or later.  See
-#   the COPYRIGHT file.

.dropdown{:class => ["hang_#{hang}", defined?(dropdown_class) && dropdown_class]}
  .button.toggle{:class => ("in_aspects" if selected_aspects.size > 0)}
    - if selected_aspects.size == all_aspects.size
      = t('all_aspects')
    - elsif selected_aspects.size == 1
      = selected_aspects.first.name
    - else
      = t('.toggle', :count => selected_aspects.size)
    &#9660;

  .wrapper
    %ul.dropdown_list{:unSelectable => 'on', 'data-person_id' => (person.id if defined?(person) && person), 'data-service_uid' => (service_uid if defined?(service_uid))}
      - if (defined?(dropdown_may_toggle_selection) && dropdown_may_toggle_selection)
        %li.newItem
          %span
            - if selected_aspects.size == 0
              = t('aspects.select_all')
            - else
              = t('aspects.deselect_all')
      - for aspect in all_aspects
        = aspect_dropdown_list_item(aspect, selected_aspects.include?(aspect) )

      - if (dropdown_may_create_new_aspect && defined?(person) && person)
        %li.newItem
          .add_aspect
            = link_to t('contacts.index.add_a_new_aspect'), new_aspect_path(:person_id => person.id, :remote => true), :rel => 'facebox'
