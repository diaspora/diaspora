-----------------------------
<%= color('Capistrano', :bold) %>
-----------------------------

Capistrano is a utility for automating the execution of commands across multiple remote machines. It was originally conceived as an aid to deploy Ruby on Rails web applications, but has since evolved to become a much more general-purpose tool.

The command-line interface to Capistrano is via the `cap' command.

	cap [ option ] ... action ...

The following options are understood:

  <%= color '-d, --debug', :bold %>
	Causes Capistrano to pause and prompt before executing any remote command, giving the user the option to either execute the command, skip the command, or abort execution entirely. This makes it a great way to troubleshoot tasks, or test custom tasks, by executing commands one at a time and checking the server to make sure they worked as expected before moving on to the next command. (Compare this to the --dry-run command.)

  <%= color '-e, --explain TASK', :bold %>
	Displays the extended description of the given task. Not all tasks will have an extended description, but for those that do, this can provide a wealth of additional usage information, such as describing environment variables or settings that can affect the execution of the task.

  <%= color '-F, --default-config', :bold %>
	By default, cap will search for a config file named `Capfile' or `capfile' in the current directory, or in any parent directory, and will automatically load it. However, if you specify the -f flag (see below), cap will use that file instead of the default config. If you want to use both the default config, and files loaded via -f, you can specify -F to force cap to search for and load the default config, even if additional files were specified via -f.

  <%= color '-f, --file FILE', :bold %>
	Causes the named file to be loaded. Capistrano will search both its own recipe directory, as well as the current directory, looking for the named file. An ".rb" extension is optional. The -f option may be given any number of times, but if it is given, it will take the place of the normal `Capfile' or `capfile' detection. Use -F if you want the default capfile to be loaded when you use -f.

  <%= color '-H, --long-help', :bold %>
	Displays this document and exits.

  <%= color '-h, --help', :bold %>
	Shows a brief summary of these options and exits.

  <%= color '-l, --logger [STDERR|STDOUT|file]', :bold %>
	Change the file used to print the output. It offers three options: standard error(stderr), standard output and file. Options are not case sensitive. By default Capistrano uses stderr.

  <%= color '-n, --dry-run', :bold %>
	Causes Capistrano to simply display each remote command, without executing it. In this sense it is similar to --debug, but without the prompt. Note that commands executed locally are still run--only remote commands are skipped.
  
  <%= color '-p, --password', :bold %>
	Normally, cap will prompt for the password on-demand, the first time it is needed. This can make it hard to walk away from Capistrano, since you might not know if it will prompt for a password down the road. In such cases, you can use the -p option to force cap to prompt for the password immediately.

  <%= color '-q, --quiet', :bold %>
	Display only critical error messages. All other output is suppressed.

  <%= color '-S, --set-before NAME=VALUE', :bold %>
	Sets the given variable to the given value, before loading any recipe files. This is useful if you have a recipe file that depends on a certain variable being set, at the time it is loaded.

  <%= color '-s, --set NAME=VALUE', :bold %>
	Sets the given variable to the given value, after loading all recipe files. This is useful when you want to override the value of a variable which is used in a task. Note that this will set the variables too late for them to affect conditions that are executed as the recipes are loaded.

  <%= color '-T, --tasks PATTERN', :bold %>
	Displays the list of all tasks (matching optional PATTERN) in all loaded recipe files. If a task has no description, or if the description starts with the [internal] tag, the task will not be listed unless you also specify -v.

  <%= color '-t, --tool', :bold %>
	Abbreviates the output of -T for integration with other tools. Without -t, -T will list tasks with their summaries, and may include additional instructive text at the bottom. When integrating with other tools (e.g., bash auto-expansion and the like) that additional text can get in the way. This switch makes it easier for those tools to parse the list of tasks. (The -t switch has no effect if the -T switch is not specified.)

  <%= color '-V, --version', :bold %>
	Shows the current Capistrano version number and exits.

  <%= color '-v, --verbose', :bold %>
	Increase the verbosity. You can specify this option up to three times to further increase verbosity. By default, cap will use maximum verbosity, but if you specify an explicit verbosity, that will be used instead. See also -q.

  <%= color '-X, --skip-system-config', :bold %>
	By default, cap will look for and (if it exists) load the global system configuration file located in /etc/capistrano.conf. If you don't want cap to load that file, give this option.

  <%= color '-x, --skip-user-config', :bold %>
	By default, cap will look for and (if it exists) load the user-specific configuration file located in $HOME/.caprc. If you don't want cap to load that file, give this option.

-----------------------------
<%= color('Environment Variables', :bold) %>
-----------------------------

  <%= color 'HOSTS', :bold %>
	Execute the tasks against this comma-separated list of hosts.  Effectively, this makes the host(s) part of every roles.

  <%= color 'HOSTFILTER', :bold %>
	Execute tasks against this comma-separated list of host, but only if the host has the proper role for the task.

  <%= color 'ROLES', :bold %>
	Execute tasks against this comma-separated list of roles.  Hosts which do not have the right roles will be skipped.
