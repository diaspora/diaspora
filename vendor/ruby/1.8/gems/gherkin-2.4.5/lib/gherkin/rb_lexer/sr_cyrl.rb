
# line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
require 'gherkin/lexer/i18n_lexer'

module Gherkin
  module RbLexer
    class Sr_cyrl #:nodoc:
      
# line 116 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"

 
      def initialize(listener)
        @listener = listener
        
# line 16 "lib/gherkin/rb_lexer/sr_cyrl.rb"
class << self
	attr_accessor :_lexer_actions
	private :_lexer_actions, :_lexer_actions=
end
self._lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 14, 1, 15, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 2, 2, 16, 2, 11, 0, 2, 
	12, 13, 2, 15, 0, 2, 15, 1, 
	2, 15, 14, 2, 15, 17, 2, 16, 
	4, 2, 16, 5, 2, 16, 6, 2, 
	16, 7, 2, 16, 8, 2, 16, 14, 
	2, 18, 19, 2, 20, 0, 2, 20, 
	1, 2, 20, 14, 2, 20, 17, 3, 
	3, 12, 13, 3, 9, 12, 13, 3, 
	10, 12, 13, 3, 11, 12, 13, 3, 
	12, 13, 16, 3, 15, 12, 13, 4, 
	2, 12, 13, 16, 4, 15, 0, 12, 
	13
]

class << self
	attr_accessor :_lexer_key_offsets
	private :_lexer_key_offsets, :_lexer_key_offsets=
end
self._lexer_key_offsets = [
	0, 0, 12, 21, 22, 23, 24, 25, 
	26, 27, 29, 40, 41, 42, 46, 51, 
	56, 61, 66, 70, 74, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 96, 103, 108, 
	112, 118, 121, 123, 129, 140, 141, 142, 
	143, 144, 145, 146, 147, 148, 149, 152, 
	153, 155, 156, 157, 159, 160, 161, 162, 
	163, 165, 166, 167, 168, 169, 170, 171, 
	172, 173, 174, 175, 176, 185, 195, 197, 
	199, 201, 203, 205, 216, 218, 220, 222, 
	224, 226, 228, 230, 232, 234, 238, 240, 
	243, 245, 247, 250, 252, 254, 256, 258, 
	260, 262, 264, 266, 268, 270, 272, 274, 
	276, 278, 280, 282, 284, 286, 288, 290, 
	292, 294, 296, 298, 300, 302, 305, 307, 
	309, 311, 313, 315, 317, 319, 321, 323, 
	325, 327, 329, 331, 333, 335, 337, 339, 
	341, 343, 345, 347, 349, 351, 353, 355, 
	358, 360, 362, 364, 366, 368, 371, 373, 
	375, 377, 379, 381, 383, 385, 387, 389, 
	391, 393, 395, 397, 399, 401, 403, 405, 
	407, 409, 411, 413, 415, 417, 419, 421, 
	423, 425, 427, 429, 431, 433, 435, 437, 
	439, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 463, 465, 467, 469, 
	471, 473, 475, 477, 479, 481, 483, 485, 
	487, 489, 491, 493, 495, 497, 499, 501, 
	503, 505, 507, 509, 511, 513, 515, 517, 
	519, 521, 522, 523, 524, 525, 526, 527, 
	528, 529, 530, 539, 549, 551, 553, 555, 
	557, 559, 561, 563, 565, 567, 569, 571, 
	573, 575, 577, 581, 583, 585, 587, 589, 
	592, 594, 596, 598, 600, 602, 604, 606, 
	608, 610, 612, 614, 616, 618, 620, 622, 
	624, 626, 628, 631, 633, 635, 637, 639, 
	641, 643, 645, 647, 649, 651, 653, 655, 
	657, 659, 661, 663, 665, 667, 669, 671, 
	673, 675, 677, 679, 681, 683, 685, 687, 
	689, 691, 693, 695, 697, 699, 701, 703, 
	705, 707, 709, 711, 713, 715, 717, 719, 
	721, 723, 725, 727, 729, 731, 733, 735, 
	737, 739, 741, 743, 745, 747, 749, 751, 
	753, 755, 757, 759, 761, 763, 765, 767, 
	769, 771, 773, 774, 775, 776, 777, 778, 
	779, 780, 781, 782, 783, 784, 785, 786, 
	787, 788, 789, 790, 791, 792, 800, 807, 
	809, 811, 813, 815, 817, 820, 822, 824, 
	826, 828, 830, 832, 834, 836, 838, 840, 
	842, 844, 846, 848, 850, 852, 854, 856, 
	858, 860, 862, 864, 866, 868, 870, 872, 
	874, 876, 879, 881, 883, 885, 887, 889, 
	891, 893, 895, 897, 899, 901, 903, 906, 
	908, 910, 912, 914, 916, 918, 920, 922, 
	924, 926, 928, 930, 932, 934, 936, 938, 
	941, 943, 946, 948, 950, 952, 954, 956, 
	959, 961, 963, 965, 967, 969, 971, 973, 
	975, 977, 979, 981, 983, 985, 987, 989, 
	991, 993, 995, 997, 999, 1001, 1003, 1005, 
	1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 
	1023, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 
	1039, 1041, 1044, 1046, 1048, 1050, 1052, 1054, 
	1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 
	1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 
	1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 
	1104, 1106, 1108, 1110, 1112, 1114, 1116, 1117, 
	1118, 1119, 1120, 1121, 1122, 1124, 1125, 1126, 
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 
	1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 
	1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 
	1160, 1162, 1163, 1164, 1165, 1166, 1173, 1177, 
	1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 
	1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 
	1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 
	1227, 1229, 1231, 1233, 1235, 1237, 1239, 1241, 
	1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 
	1259, 1261, 1263, 1265, 1267, 1269, 1271, 1272, 
	1273, 1282, 1292, 1294, 1296, 1298, 1300, 1302, 
	1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 
	1320, 1324, 1326, 1329, 1331, 1333, 1336, 1338, 
	1340, 1342, 1344, 1347, 1349, 1351, 1353, 1355, 
	1357, 1359, 1361, 1363, 1365, 1367, 1369, 1371, 
	1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 
	1389, 1391, 1393, 1395, 1397, 1400, 1402, 1404, 
	1406, 1408, 1410, 1412, 1415, 1417, 1419, 1421, 
	1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 
	1439, 1442, 1444, 1446, 1448, 1450, 1452, 1454, 
	1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 
	1472, 1474, 1477, 1479, 1481, 1483, 1485, 1487, 
	1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 
	1506, 1508, 1510, 1512, 1514, 1516, 1518, 1520, 
	1522, 1524, 1526, 1528, 1530, 1532, 1534, 1536, 
	1538, 1540, 1542, 1544, 1546, 1548, 1550, 1552, 
	1554, 1556, 1558, 1560, 1562, 1564, 1566, 1568, 
	1570, 1572, 1574, 1576, 1578, 1580, 1582, 1584, 
	1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 
	1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 
	1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 
	1634, 1636, 1638, 1640, 1642, 1643, 1644, 1645, 
	1646, 1647, 1648, 1649, 1651, 1652, 1653, 1654, 
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 
	1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 
	1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 
	1687, 1688, 1689, 1690, 1691, 1692, 1694, 1695, 
	1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 
	1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 
	1712, 1713, 1714, 1715, 1716, 1717, 1718
]

class << self
	attr_accessor :_lexer_trans_keys
	private :_lexer_trans_keys, :_lexer_trans_keys=
end
self._lexer_trans_keys = [
	-48, -17, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -112, -105, -104, -102, 
	-100, -98, -97, -95, -92, -48, -69, -48, 
	-72, 32, 10, 10, 13, -48, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	34, 34, 10, 32, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 34, 9, 13, 
	10, 32, 34, 9, 13, 10, 32, 34, 
	9, 13, 10, 32, 9, 13, 10, 32, 
	9, 13, 10, 13, 10, 95, 70, 69, 
	65, 84, 85, 82, 69, 95, 69, 78, 
	68, 95, 37, 13, 32, 64, 9, 10, 
	9, 10, 13, 32, 64, 11, 12, 10, 
	32, 64, 9, 13, 32, 124, 9, 13, 
	10, 32, 92, 124, 9, 13, 10, 92, 
	124, 10, 92, 10, 32, 92, 124, 9, 
	13, -48, 10, 32, 34, 35, 37, 42, 
	64, 124, 9, 13, -48, -80, -48, -76, 
	-48, -80, -47, -126, -48, -75, -72, -66, 
	-48, -80, -66, -48, -76, -48, 32, -80, 
	-48, -67, -47, -126, -122, -48, -75, -48, 
	-70, -47, -127, -47, -126, 58, 10, 10, 
	-48, 10, 32, 35, 37, 42, 64, 9, 
	13, -112, -105, -104, -102, -100, -98, -97, 
	-95, -92, 10, -48, 10, -69, 10, -48, 
	10, -72, 10, 10, 32, -48, 10, 32, 
	34, 35, 37, 42, 64, 124, 9, 13, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-48, 10, -80, 10, -47, 10, -126, 10, 
	-48, 10, -75, -72, -66, 10, -48, 10, 
	-80, -66, 10, -48, 10, -76, 10, -48, 
	10, 32, -80, 10, -48, 10, -67, 10, 
	-47, 10, -122, 10, -48, 10, -75, 10, 
	-48, 10, -65, 10, -47, 10, -126, 10, 
	10, 58, -48, 10, -66, 10, -48, 10, 
	-77, 10, -47, 10, -125, 10, -47, 10, 
	-101, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -47, 10, -127, 10, -48, -47, 
	10, -67, 10, -48, 10, -76, 10, -48, 
	10, -127, 10, -48, 10, -66, 10, -48, 
	10, -79, 10, -48, 10, -72, 10, -48, 
	10, -67, 10, -48, 10, -80, 10, -47, 
	10, -128, 10, -48, 10, -72, 10, -48, 
	10, -68, 10, -48, 10, -75, 10, -47, 
	10, -128, 10, -48, -47, 10, -70, 10, 
	-48, 10, -72, 10, -47, 10, -122, 10, 
	-126, -122, 10, -47, 10, -128, 10, -47, 
	10, -125, 10, -48, 10, -70, 10, -47, 
	10, -126, 10, -47, 10, -125, 10, -47, 
	10, -128, 10, -48, 10, -80, 10, 10, 
	32, -47, 10, -127, 10, -47, 10, -122, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -47, 10, -104, 
	10, -48, 10, -75, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -47, 10, -125, 10, -48, 10, -67, 
	10, -48, 10, -70, 10, -47, 10, -122, 
	10, -48, 10, -72, 10, -48, 10, -66, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -48, 10, -69, 10, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, -48, -75, -48, -65, -47, -126, 58, 
	10, 10, -48, 10, 32, 35, 37, 42, 
	64, 9, 13, -112, -105, -104, -102, -100, 
	-98, -97, -95, -92, 10, -48, 10, -69, 
	10, -48, 10, -72, 10, 10, 32, -48, 
	10, -80, 10, -48, 10, -76, 10, -48, 
	10, -80, 10, -47, 10, -126, 10, -48, 
	10, -75, -72, -66, 10, -48, 10, -80, 
	10, -48, 10, -76, 10, -48, 10, 32, 
	-80, 10, -48, 10, -66, 10, -48, 10, 
	-77, 10, -47, 10, -125, 10, -47, 10, 
	-101, 10, -48, 10, -67, 10, -48, 10, 
	-66, 10, -47, 10, -127, 10, -47, 10, 
	-126, 10, 10, 58, -48, -47, 10, -67, 
	10, -48, 10, -76, 10, -48, 10, -127, 
	10, -48, 10, -66, 10, -48, 10, -79, 
	10, -48, 10, -72, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -47, 10, -128, 
	10, -48, 10, -72, 10, -48, 10, -68, 
	10, -48, 10, -75, 10, -47, 10, -128, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -47, 10, -125, 
	10, -48, 10, -67, 10, -48, 10, -70, 
	10, -47, 10, -122, 10, -48, 10, -72, 
	10, -48, 10, -66, 10, -48, 10, -67, 
	10, -48, 10, -80, 10, -48, 10, -69, 
	10, 10, 95, 10, 70, 10, 69, 10, 
	65, 10, 84, 10, 85, 10, 82, 10, 
	69, 10, 95, 10, 69, 10, 78, 10, 
	68, 10, 95, 10, 37, -48, -66, -48, 
	-77, -47, -125, -47, -101, -48, -67, -48, 
	-66, -47, -127, -47, -126, 58, 10, 10, 
	-48, 10, 32, 35, 37, 64, 9, 13, 
	-102, -100, -98, -97, -95, -92, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -47, 
	10, -126, -122, 10, -48, 10, -75, 10, 
	-48, 10, -70, 10, -47, 10, -127, 10, 
	-47, 10, -126, 10, 10, 58, -48, 10, 
	-75, 10, -48, 10, -65, 10, -48, 10, 
	-66, 10, -48, 10, -77, 10, -47, 10, 
	-125, 10, -47, 10, -101, 10, -48, 10, 
	-67, 10, -48, 10, -66, 10, -47, 10, 
	-127, 10, -48, 10, -67, -66, 10, -48, 
	10, -66, 10, -48, 10, -78, 10, -48, 
	10, -80, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	-47, 10, -66, 10, -48, 10, -73, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -75, 10, -47, 10, 
	-128, 10, -48, 10, 58, -72, 10, -48, 
	-47, 10, -70, 10, -48, 10, -72, 10, 
	-47, 10, -122, 10, -126, -122, 10, -47, 
	10, -128, 10, -47, 10, -125, 10, -48, 
	10, -70, 10, -47, 10, -126, 10, -47, 
	10, -125, 10, -47, 10, -128, 10, -48, 
	10, -80, 10, 10, 32, -47, 10, -127, 
	10, -47, 10, -122, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -47, 10, -104, 10, -48, 10, -75, 
	10, -48, 10, -67, 10, -48, 10, -80, 
	10, -47, 10, -128, 10, -48, 10, -72, 
	10, -48, -47, 10, -66, 10, -104, 10, 
	-48, 10, -47, 10, -125, 10, -48, 10, 
	-67, 10, -48, 10, -70, 10, -47, 10, 
	-122, 10, -48, 10, -72, 10, -48, 10, 
	-66, 10, -48, 10, -67, 10, -48, 10, 
	-80, 10, -48, 10, -69, 10, 10, 95, 
	10, 70, 10, 69, 10, 65, 10, 84, 
	10, 85, 10, 82, 10, 69, 10, 95, 
	10, 69, 10, 78, 10, 68, 10, 95, 
	10, 37, -48, -47, -67, -48, -76, -48, 
	-127, -48, -67, -66, -48, -66, -48, -78, 
	-48, -80, -48, -79, -48, -72, -48, -67, 
	-48, -80, -48, -47, -66, -48, -73, -48, 
	-80, -48, -76, -48, -72, -48, -67, -128, 
	-48, -72, -48, -68, -48, -75, -47, -128, 
	-48, 58, -72, 58, 10, 10, -48, 10, 
	32, 35, 124, 9, 13, -100, -98, -92, 
	10, -48, 10, -66, 10, -48, 10, -77, 
	10, -47, 10, -125, 10, -47, 10, -101, 
	10, -48, 10, -67, 10, -48, 10, -66, 
	10, -47, 10, -127, 10, -47, 10, -126, 
	10, 10, 58, -47, 10, -127, 10, -48, 
	10, -66, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -47, 10, -125, 10, -48, 
	10, -67, 10, -48, 10, -70, 10, -47, 
	10, -122, 10, -48, 10, -72, 10, -48, 
	10, -66, 10, -48, 10, -67, 10, -48, 
	10, -80, 10, -48, 10, -69, 10, 10, 
	10, -48, 10, 32, 35, 37, 42, 64, 
	9, 13, -112, -105, -104, -102, -100, -98, 
	-97, -95, -92, 10, -48, 10, -69, 10, 
	-48, 10, -72, 10, 10, 32, -48, 10, 
	-80, 10, -48, 10, -76, 10, -48, 10, 
	-80, 10, -47, 10, -126, 10, -48, 10, 
	-75, -72, -66, 10, -48, 10, -80, -66, 
	10, -48, 10, -76, 10, -48, 10, 32, 
	-80, 10, -48, 10, -67, 10, -47, 10, 
	-126, -122, 10, -48, 10, -75, 10, -48, 
	10, -70, 10, -47, 10, -127, 10, -47, 
	10, -126, 10, 10, 58, -48, 10, -75, 
	10, -48, 10, -65, 10, -48, 10, -66, 
	10, -48, 10, -77, 10, -47, 10, -125, 
	10, -47, 10, -101, 10, -48, 10, -67, 
	10, -48, 10, -66, 10, -48, -47, 10, 
	-67, 10, -48, 10, -76, 10, -48, 10, 
	-127, 10, -48, 10, -67, -66, 10, -48, 
	10, -66, 10, -48, 10, -78, 10, -48, 
	10, -80, 10, -48, 10, -79, 10, -48, 
	10, -72, 10, -48, 10, -67, 10, -48, 
	-47, 10, -66, 10, -48, 10, -73, 10, 
	-48, 10, -80, 10, -48, 10, -76, 10, 
	-128, 10, -48, 10, -72, 10, -48, 10, 
	-68, 10, -48, 10, -75, 10, -47, 10, 
	-128, 10, -48, -47, 10, -70, 10, -48, 
	10, -72, 10, -47, 10, -122, 10, -126, 
	-122, 10, -47, 10, -128, 10, -47, 10, 
	-125, 10, -48, 10, -70, 10, -47, 10, 
	-126, 10, -47, 10, -125, 10, -47, 10, 
	-128, 10, -48, 10, -80, 10, 10, 32, 
	-47, 10, -127, 10, -47, 10, -122, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-48, 10, -72, 10, -47, 10, -104, 10, 
	-48, 10, -75, 10, -48, 10, -67, 10, 
	-48, 10, -80, 10, -47, 10, -128, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-47, 10, -125, 10, -48, 10, -67, 10, 
	-48, 10, -70, 10, -47, 10, -122, 10, 
	-48, 10, -72, 10, -48, 10, -66, 10, 
	-48, 10, -67, 10, -48, 10, -80, 10, 
	-48, 10, -69, 10, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	-48, -47, -70, -48, -72, -47, -122, -48, 
	-80, -126, -122, -47, -128, -47, -125, -48, 
	-70, -47, -126, -47, -125, -47, -128, -48, 
	-80, 32, -47, -127, -47, -122, -48, -75, 
	-48, -67, -48, -80, -47, -128, -48, -72, 
	-47, -104, -48, -75, -48, -67, -48, -80, 
	-47, -128, -48, -72, -48, -47, -66, 58, 
	-104, -48, -47, -125, -48, -67, -48, -70, 
	-47, -122, -48, -72, -48, -66, -48, -67, 
	-48, -80, -48, -69, -69, -65, 0
]

class << self
	attr_accessor :_lexer_single_lengths
	private :_lexer_single_lengths, :_lexer_single_lengths=
end
self._lexer_single_lengths = [
	0, 10, 9, 1, 1, 1, 1, 1, 
	1, 2, 9, 1, 1, 2, 3, 3, 
	3, 3, 2, 2, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 5, 3, 2, 
	4, 3, 2, 4, 9, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 1, 
	2, 1, 1, 2, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 7, 10, 2, 2, 
	2, 2, 2, 9, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 3, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 7, 10, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 6, 7, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 3, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 5, 4, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 1, 1, 
	7, 10, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 3, 2, 2, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0
]

class << self
	attr_accessor :_lexer_range_lengths
	private :_lexer_range_lengths, :_lexer_range_lengths=
end
self._lexer_range_lengths = [
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 1, 
	1, 0, 0, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_lexer_index_offsets
	private :_lexer_index_offsets, :_lexer_index_offsets=
end
self._lexer_index_offsets = [
	0, 0, 12, 22, 24, 26, 28, 30, 
	32, 34, 37, 48, 50, 52, 56, 61, 
	66, 71, 76, 80, 84, 87, 89, 91, 
	93, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 122, 129, 134, 
	138, 144, 148, 151, 157, 168, 170, 172, 
	174, 176, 178, 180, 182, 184, 186, 190, 
	192, 195, 197, 199, 202, 204, 206, 208, 
	210, 213, 215, 217, 219, 221, 223, 225, 
	227, 229, 231, 233, 235, 244, 255, 258, 
	261, 264, 267, 270, 281, 284, 287, 290, 
	293, 296, 299, 302, 305, 308, 313, 316, 
	320, 323, 326, 330, 333, 336, 339, 342, 
	345, 348, 351, 354, 357, 360, 363, 366, 
	369, 372, 375, 378, 381, 384, 387, 390, 
	393, 396, 399, 402, 405, 408, 412, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 445, 448, 451, 454, 457, 460, 463, 
	466, 469, 472, 475, 478, 481, 484, 487, 
	491, 494, 497, 500, 503, 506, 510, 513, 
	516, 519, 522, 525, 528, 531, 534, 537, 
	540, 543, 546, 549, 552, 555, 558, 561, 
	564, 567, 570, 573, 576, 579, 582, 585, 
	588, 591, 594, 597, 600, 603, 606, 609, 
	612, 615, 618, 621, 624, 627, 630, 633, 
	636, 639, 642, 645, 648, 651, 654, 657, 
	660, 663, 666, 669, 672, 675, 678, 681, 
	684, 687, 690, 693, 696, 699, 702, 705, 
	708, 711, 714, 717, 720, 723, 726, 729, 
	732, 735, 737, 739, 741, 743, 745, 747, 
	749, 751, 753, 762, 773, 776, 779, 782, 
	785, 788, 791, 794, 797, 800, 803, 806, 
	809, 812, 815, 820, 823, 826, 829, 832, 
	836, 839, 842, 845, 848, 851, 854, 857, 
	860, 863, 866, 869, 872, 875, 878, 881, 
	884, 887, 890, 894, 897, 900, 903, 906, 
	909, 912, 915, 918, 921, 924, 927, 930, 
	933, 936, 939, 942, 945, 948, 951, 954, 
	957, 960, 963, 966, 969, 972, 975, 978, 
	981, 984, 987, 990, 993, 996, 999, 1002, 
	1005, 1008, 1011, 1014, 1017, 1020, 1023, 1026, 
	1029, 1032, 1035, 1038, 1041, 1044, 1047, 1050, 
	1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 
	1077, 1080, 1083, 1086, 1089, 1092, 1095, 1098, 
	1101, 1104, 1107, 1109, 1111, 1113, 1115, 1117, 
	1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 
	1135, 1137, 1139, 1141, 1143, 1145, 1153, 1161, 
	1164, 1167, 1170, 1173, 1176, 1180, 1183, 1186, 
	1189, 1192, 1195, 1198, 1201, 1204, 1207, 1210, 
	1213, 1216, 1219, 1222, 1225, 1228, 1231, 1234, 
	1237, 1240, 1243, 1246, 1249, 1252, 1255, 1258, 
	1261, 1264, 1268, 1271, 1274, 1277, 1280, 1283, 
	1286, 1289, 1292, 1295, 1298, 1301, 1304, 1308, 
	1311, 1314, 1317, 1320, 1323, 1326, 1329, 1332, 
	1335, 1338, 1341, 1344, 1347, 1350, 1353, 1356, 
	1360, 1363, 1367, 1370, 1373, 1376, 1379, 1382, 
	1386, 1389, 1392, 1395, 1398, 1401, 1404, 1407, 
	1410, 1413, 1416, 1419, 1422, 1425, 1428, 1431, 
	1434, 1437, 1440, 1443, 1446, 1449, 1452, 1455, 
	1458, 1461, 1464, 1467, 1470, 1473, 1476, 1479, 
	1482, 1485, 1488, 1491, 1494, 1497, 1500, 1503, 
	1506, 1509, 1513, 1516, 1519, 1522, 1525, 1528, 
	1531, 1534, 1537, 1540, 1543, 1546, 1549, 1552, 
	1555, 1558, 1561, 1564, 1567, 1570, 1573, 1576, 
	1579, 1582, 1585, 1588, 1591, 1594, 1597, 1600, 
	1603, 1606, 1609, 1612, 1615, 1618, 1621, 1623, 
	1625, 1627, 1629, 1631, 1633, 1636, 1638, 1640, 
	1642, 1644, 1646, 1648, 1650, 1652, 1654, 1656, 
	1658, 1660, 1662, 1664, 1667, 1669, 1671, 1673, 
	1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 
	1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 
	1707, 1710, 1712, 1714, 1716, 1718, 1725, 1730, 
	1733, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 
	1757, 1760, 1763, 1766, 1769, 1772, 1775, 1778, 
	1781, 1784, 1787, 1790, 1793, 1796, 1799, 1802, 
	1805, 1808, 1811, 1814, 1817, 1820, 1823, 1826, 
	1829, 1832, 1835, 1838, 1841, 1844, 1847, 1850, 
	1853, 1856, 1859, 1862, 1865, 1868, 1871, 1873, 
	1875, 1884, 1895, 1898, 1901, 1904, 1907, 1910, 
	1913, 1916, 1919, 1922, 1925, 1928, 1931, 1934, 
	1937, 1942, 1945, 1949, 1952, 1955, 1959, 1962, 
	1965, 1968, 1971, 1975, 1978, 1981, 1984, 1987, 
	1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 
	2014, 2017, 2020, 2023, 2026, 2029, 2032, 2035, 
	2038, 2041, 2044, 2047, 2050, 2054, 2057, 2060, 
	2063, 2066, 2069, 2072, 2076, 2079, 2082, 2085, 
	2088, 2091, 2094, 2097, 2100, 2103, 2106, 2109, 
	2112, 2116, 2119, 2122, 2125, 2128, 2131, 2134, 
	2137, 2140, 2143, 2146, 2149, 2152, 2155, 2158, 
	2161, 2164, 2168, 2171, 2174, 2177, 2180, 2183, 
	2187, 2190, 2193, 2196, 2199, 2202, 2205, 2208, 
	2211, 2214, 2217, 2220, 2223, 2226, 2229, 2232, 
	2235, 2238, 2241, 2244, 2247, 2250, 2253, 2256, 
	2259, 2262, 2265, 2268, 2271, 2274, 2277, 2280, 
	2283, 2286, 2289, 2292, 2295, 2298, 2301, 2304, 
	2307, 2310, 2313, 2316, 2319, 2322, 2325, 2328, 
	2331, 2334, 2337, 2340, 2343, 2346, 2349, 2352, 
	2355, 2358, 2361, 2364, 2367, 2370, 2373, 2376, 
	2379, 2382, 2385, 2388, 2391, 2394, 2397, 2400, 
	2403, 2406, 2409, 2412, 2415, 2417, 2419, 2421, 
	2423, 2425, 2427, 2429, 2432, 2434, 2436, 2438, 
	2440, 2442, 2444, 2446, 2448, 2450, 2452, 2454, 
	2456, 2458, 2460, 2462, 2464, 2466, 2468, 2470, 
	2472, 2474, 2476, 2478, 2480, 2482, 2484, 2486, 
	2488, 2490, 2492, 2494, 2496, 2498, 2500, 2502, 
	2504, 2506, 2508, 2510, 2512, 2514, 2517, 2519, 
	2521, 2523, 2525, 2527, 2529, 2531, 2533, 2535, 
	2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 
	2553, 2555, 2557, 2559, 2561, 2563, 2565
]

class << self
	attr_accessor :_lexer_trans_targs
	private :_lexer_trans_targs, :_lexer_trans_targs=
end
self._lexer_trans_targs = [
	2, 868, 10, 10, 11, 20, 22, 7, 
	36, 39, 10, 0, 3, 45, 7, 55, 
	354, 525, 547, 795, 850, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	0, 9, 10, 21, 9, 2, 10, 10, 
	11, 20, 22, 7, 36, 39, 10, 0, 
	12, 0, 13, 0, 14, 13, 13, 0, 
	15, 15, 16, 15, 15, 15, 15, 16, 
	15, 15, 15, 15, 17, 15, 15, 15, 
	15, 18, 15, 15, 10, 19, 19, 0, 
	10, 19, 19, 0, 10, 21, 20, 10, 
	0, 23, 0, 24, 0, 25, 0, 26, 
	0, 27, 0, 28, 0, 29, 0, 30, 
	0, 31, 0, 32, 0, 33, 0, 34, 
	0, 35, 0, 870, 0, 0, 0, 0, 
	0, 37, 38, 10, 38, 38, 36, 37, 
	37, 10, 38, 36, 38, 0, 39, 40, 
	39, 0, 44, 43, 42, 40, 43, 41, 
	0, 42, 40, 41, 0, 42, 41, 44, 
	43, 42, 40, 43, 41, 2, 44, 44, 
	11, 20, 22, 7, 36, 39, 44, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 7, 7, 7, 0, 56, 0, 
	57, 61, 0, 58, 0, 59, 0, 60, 
	8, 0, 7, 0, 62, 0, 63, 0, 
	64, 0, 65, 233, 0, 66, 0, 67, 
	0, 68, 0, 69, 0, 70, 0, 71, 
	0, 72, 0, 73, 0, 74, 0, 76, 
	75, 76, 75, 77, 76, 76, 10, 219, 
	82, 10, 76, 75, 78, 84, 82, 94, 
	111, 125, 141, 151, 201, 76, 75, 79, 
	76, 75, 80, 76, 75, 81, 76, 75, 
	82, 76, 75, 76, 83, 75, 2, 10, 
	10, 11, 20, 22, 7, 36, 39, 10, 
	0, 85, 76, 75, 86, 76, 75, 87, 
	76, 75, 88, 76, 75, 89, 76, 75, 
	90, 76, 75, 91, 76, 75, 92, 76, 
	75, 93, 76, 75, 82, 82, 82, 76, 
	75, 95, 76, 75, 96, 100, 76, 75, 
	97, 76, 75, 98, 76, 75, 99, 76, 
	83, 75, 82, 76, 75, 101, 76, 75, 
	102, 76, 75, 103, 76, 75, 104, 76, 
	75, 105, 76, 75, 106, 76, 75, 107, 
	76, 75, 108, 76, 75, 109, 76, 75, 
	110, 76, 75, 76, 83, 75, 112, 76, 
	75, 113, 76, 75, 114, 76, 75, 115, 
	76, 75, 116, 76, 75, 117, 76, 75, 
	118, 76, 75, 119, 76, 75, 120, 76, 
	75, 121, 76, 75, 122, 76, 75, 123, 
	76, 75, 124, 76, 75, 108, 76, 75, 
	126, 130, 76, 75, 127, 76, 75, 128, 
	76, 75, 129, 76, 75, 99, 76, 75, 
	131, 76, 75, 132, 76, 75, 133, 76, 
	75, 134, 76, 75, 135, 76, 75, 136, 
	76, 75, 137, 76, 75, 138, 76, 75, 
	139, 76, 75, 140, 76, 75, 110, 76, 
	75, 142, 76, 75, 143, 76, 75, 144, 
	76, 75, 145, 76, 75, 146, 76, 75, 
	147, 76, 75, 148, 76, 75, 149, 76, 
	75, 150, 76, 75, 110, 76, 75, 152, 
	157, 76, 75, 153, 76, 75, 154, 76, 
	75, 155, 76, 75, 156, 76, 75, 139, 
	76, 75, 158, 189, 76, 75, 159, 76, 
	75, 160, 76, 75, 161, 76, 75, 162, 
	76, 75, 163, 76, 75, 164, 76, 75, 
	165, 76, 75, 166, 76, 75, 167, 76, 
	75, 168, 76, 75, 169, 76, 75, 170, 
	76, 75, 171, 76, 75, 172, 76, 75, 
	76, 173, 75, 174, 76, 75, 175, 76, 
	75, 176, 76, 75, 177, 76, 75, 178, 
	76, 75, 179, 76, 75, 180, 76, 75, 
	181, 76, 75, 182, 76, 75, 183, 76, 
	75, 184, 76, 75, 185, 76, 75, 186, 
	76, 75, 187, 76, 75, 188, 76, 75, 
	139, 76, 75, 190, 76, 75, 191, 76, 
	75, 192, 76, 75, 193, 76, 75, 194, 
	76, 75, 195, 76, 75, 196, 76, 75, 
	197, 76, 75, 198, 76, 75, 199, 76, 
	75, 200, 76, 75, 110, 76, 75, 202, 
	76, 75, 203, 76, 75, 204, 76, 75, 
	205, 76, 75, 206, 76, 75, 207, 76, 
	75, 208, 76, 75, 209, 76, 75, 210, 
	76, 75, 211, 76, 75, 212, 76, 75, 
	213, 76, 75, 214, 76, 75, 215, 76, 
	75, 216, 76, 75, 217, 76, 75, 218, 
	76, 75, 119, 76, 75, 76, 220, 75, 
	76, 221, 75, 76, 222, 75, 76, 223, 
	75, 76, 224, 75, 76, 225, 75, 76, 
	226, 75, 76, 227, 75, 76, 228, 75, 
	76, 229, 75, 76, 230, 75, 76, 231, 
	75, 76, 232, 75, 76, 10, 75, 234, 
	0, 235, 0, 236, 0, 237, 0, 238, 
	0, 239, 0, 240, 0, 242, 241, 242, 
	241, 243, 242, 242, 10, 340, 248, 10, 
	242, 241, 244, 249, 248, 259, 265, 282, 
	298, 308, 322, 242, 241, 245, 242, 241, 
	246, 242, 241, 247, 242, 241, 248, 242, 
	241, 242, 83, 241, 250, 242, 241, 251, 
	242, 241, 252, 242, 241, 253, 242, 241, 
	254, 242, 241, 255, 242, 241, 256, 242, 
	241, 257, 242, 241, 258, 242, 241, 248, 
	248, 248, 242, 241, 260, 242, 241, 261, 
	242, 241, 262, 242, 241, 263, 242, 241, 
	264, 242, 83, 241, 248, 242, 241, 266, 
	242, 241, 267, 242, 241, 268, 242, 241, 
	269, 242, 241, 270, 242, 241, 271, 242, 
	241, 272, 242, 241, 273, 242, 241, 274, 
	242, 241, 275, 242, 241, 276, 242, 241, 
	277, 242, 241, 278, 242, 241, 279, 242, 
	241, 280, 242, 241, 281, 242, 241, 242, 
	83, 241, 283, 287, 242, 241, 284, 242, 
	241, 285, 242, 241, 286, 242, 241, 264, 
	242, 241, 288, 242, 241, 289, 242, 241, 
	290, 242, 241, 291, 242, 241, 292, 242, 
	241, 293, 242, 241, 294, 242, 241, 295, 
	242, 241, 296, 242, 241, 297, 242, 241, 
	281, 242, 241, 299, 242, 241, 300, 242, 
	241, 301, 242, 241, 302, 242, 241, 303, 
	242, 241, 304, 242, 241, 305, 242, 241, 
	306, 242, 241, 307, 242, 241, 281, 242, 
	241, 309, 242, 241, 310, 242, 241, 311, 
	242, 241, 312, 242, 241, 313, 242, 241, 
	314, 242, 241, 315, 242, 241, 316, 242, 
	241, 317, 242, 241, 318, 242, 241, 319, 
	242, 241, 320, 242, 241, 321, 242, 241, 
	281, 242, 241, 323, 242, 241, 324, 242, 
	241, 325, 242, 241, 326, 242, 241, 327, 
	242, 241, 328, 242, 241, 329, 242, 241, 
	330, 242, 241, 331, 242, 241, 332, 242, 
	241, 333, 242, 241, 334, 242, 241, 335, 
	242, 241, 336, 242, 241, 337, 242, 241, 
	338, 242, 241, 339, 242, 241, 273, 242, 
	241, 242, 341, 241, 242, 342, 241, 242, 
	343, 241, 242, 344, 241, 242, 345, 241, 
	242, 346, 241, 242, 347, 241, 242, 348, 
	241, 242, 349, 241, 242, 350, 241, 242, 
	351, 241, 242, 352, 241, 242, 353, 241, 
	242, 10, 241, 355, 0, 356, 0, 357, 
	0, 358, 0, 359, 0, 360, 0, 361, 
	0, 362, 0, 363, 0, 364, 0, 365, 
	0, 366, 0, 367, 0, 368, 0, 369, 
	0, 370, 0, 371, 0, 373, 372, 373, 
	372, 374, 373, 373, 10, 511, 10, 373, 
	372, 375, 394, 406, 422, 441, 493, 373, 
	372, 376, 373, 372, 377, 373, 372, 378, 
	373, 372, 379, 373, 372, 380, 373, 372, 
	381, 390, 373, 372, 382, 373, 372, 383, 
	373, 372, 384, 373, 372, 385, 373, 372, 
	386, 373, 372, 387, 373, 372, 388, 373, 
	372, 389, 373, 372, 373, 83, 372, 391, 
	373, 372, 392, 373, 372, 393, 373, 372, 
	387, 373, 372, 395, 373, 372, 396, 373, 
	372, 397, 373, 372, 398, 373, 372, 399, 
	373, 372, 400, 373, 372, 401, 373, 372, 
	402, 373, 372, 403, 373, 372, 404, 373, 
	372, 405, 373, 372, 385, 373, 372, 407, 
	373, 372, 408, 373, 372, 409, 373, 372, 
	410, 416, 373, 372, 411, 373, 372, 412, 
	373, 372, 413, 373, 372, 414, 373, 372, 
	415, 373, 372, 389, 373, 372, 417, 373, 
	372, 418, 373, 372, 419, 373, 372, 420, 
	373, 372, 421, 373, 372, 414, 373, 372, 
	423, 430, 373, 372, 424, 373, 372, 425, 
	373, 372, 426, 373, 372, 427, 373, 372, 
	428, 373, 372, 429, 373, 372, 418, 373, 
	372, 431, 373, 372, 432, 373, 372, 433, 
	373, 372, 434, 373, 372, 435, 373, 372, 
	436, 373, 372, 437, 373, 372, 438, 373, 
	372, 439, 373, 372, 440, 373, 83, 372, 
	389, 373, 372, 442, 447, 373, 372, 443, 
	373, 372, 444, 373, 372, 445, 373, 372, 
	446, 373, 372, 414, 373, 372, 448, 479, 
	373, 372, 449, 373, 372, 450, 373, 372, 
	451, 373, 372, 452, 373, 372, 453, 373, 
	372, 454, 373, 372, 455, 373, 372, 456, 
	373, 372, 457, 373, 372, 458, 373, 372, 
	459, 373, 372, 460, 373, 372, 461, 373, 
	372, 462, 373, 372, 373, 463, 372, 464, 
	373, 372, 465, 373, 372, 466, 373, 372, 
	467, 373, 372, 468, 373, 372, 469, 373, 
	372, 470, 373, 372, 471, 373, 372, 472, 
	373, 372, 473, 373, 372, 474, 373, 372, 
	475, 373, 372, 476, 373, 372, 477, 373, 
	372, 478, 373, 372, 414, 373, 372, 480, 
	373, 372, 481, 373, 372, 482, 373, 372, 
	483, 373, 372, 484, 373, 372, 485, 373, 
	372, 486, 373, 372, 487, 373, 372, 488, 
	373, 372, 489, 373, 372, 490, 491, 373, 
	372, 389, 373, 372, 492, 373, 372, 440, 
	373, 372, 494, 373, 372, 495, 373, 372, 
	496, 373, 372, 497, 373, 372, 498, 373, 
	372, 499, 373, 372, 500, 373, 372, 501, 
	373, 372, 502, 373, 372, 503, 373, 372, 
	504, 373, 372, 505, 373, 372, 506, 373, 
	372, 507, 373, 372, 508, 373, 372, 509, 
	373, 372, 510, 373, 372, 402, 373, 372, 
	373, 512, 372, 373, 513, 372, 373, 514, 
	372, 373, 515, 372, 373, 516, 372, 373, 
	517, 372, 373, 518, 372, 373, 519, 372, 
	373, 520, 372, 373, 521, 372, 373, 522, 
	372, 373, 523, 372, 373, 524, 372, 373, 
	10, 372, 526, 530, 0, 527, 0, 528, 
	0, 529, 0, 60, 0, 531, 0, 532, 
	0, 533, 539, 0, 534, 0, 535, 0, 
	536, 0, 537, 0, 538, 0, 73, 0, 
	540, 0, 541, 0, 542, 0, 543, 0, 
	544, 0, 545, 0, 546, 0, 370, 0, 
	548, 559, 0, 549, 0, 550, 0, 551, 
	0, 552, 0, 553, 0, 554, 0, 555, 
	0, 556, 0, 557, 0, 558, 0, 537, 
	0, 560, 0, 561, 0, 562, 0, 563, 
	0, 564, 0, 565, 0, 566, 0, 567, 
	0, 568, 0, 569, 622, 0, 570, 0, 
	571, 0, 573, 572, 573, 572, 574, 573, 
	573, 10, 10, 573, 572, 575, 592, 604, 
	573, 572, 576, 573, 572, 577, 573, 572, 
	578, 573, 572, 579, 573, 572, 580, 573, 
	572, 581, 573, 572, 582, 573, 572, 583, 
	573, 572, 584, 573, 572, 585, 573, 572, 
	586, 573, 572, 587, 573, 572, 588, 573, 
	572, 589, 573, 572, 590, 573, 572, 591, 
	573, 572, 573, 83, 572, 593, 573, 572, 
	594, 573, 572, 595, 573, 572, 596, 573, 
	572, 597, 573, 572, 598, 573, 572, 599, 
	573, 572, 600, 573, 572, 601, 573, 572, 
	602, 573, 572, 603, 573, 572, 591, 573, 
	572, 605, 573, 572, 606, 573, 572, 607, 
	573, 572, 608, 573, 572, 609, 573, 572, 
	610, 573, 572, 611, 573, 572, 612, 573, 
	572, 613, 573, 572, 614, 573, 572, 615, 
	573, 572, 616, 573, 572, 617, 573, 572, 
	618, 573, 572, 619, 573, 572, 620, 573, 
	572, 621, 573, 572, 583, 573, 572, 624, 
	623, 624, 623, 625, 624, 624, 10, 781, 
	630, 10, 624, 623, 626, 631, 630, 641, 
	664, 676, 696, 713, 763, 624, 623, 627, 
	624, 623, 628, 624, 623, 629, 624, 623, 
	630, 624, 623, 624, 83, 623, 632, 624, 
	623, 633, 624, 623, 634, 624, 623, 635, 
	624, 623, 636, 624, 623, 637, 624, 623, 
	638, 624, 623, 639, 624, 623, 640, 624, 
	623, 630, 630, 630, 624, 623, 642, 624, 
	623, 643, 647, 624, 623, 644, 624, 623, 
	645, 624, 623, 646, 624, 83, 623, 630, 
	624, 623, 648, 624, 623, 649, 624, 623, 
	650, 624, 623, 651, 660, 624, 623, 652, 
	624, 623, 653, 624, 623, 654, 624, 623, 
	655, 624, 623, 656, 624, 623, 657, 624, 
	623, 658, 624, 623, 659, 624, 623, 624, 
	83, 623, 661, 624, 623, 662, 624, 623, 
	663, 624, 623, 657, 624, 623, 665, 624, 
	623, 666, 624, 623, 667, 624, 623, 668, 
	624, 623, 669, 624, 623, 670, 624, 623, 
	671, 624, 623, 672, 624, 623, 673, 624, 
	623, 674, 624, 623, 675, 624, 623, 655, 
	624, 623, 677, 681, 624, 623, 678, 624, 
	623, 679, 624, 623, 680, 624, 623, 646, 
	624, 623, 682, 624, 623, 683, 624, 623, 
	684, 690, 624, 623, 685, 624, 623, 686, 
	624, 623, 687, 624, 623, 688, 624, 623, 
	689, 624, 623, 659, 624, 623, 691, 624, 
	623, 692, 624, 623, 693, 624, 623, 694, 
	624, 623, 695, 624, 623, 688, 624, 623, 
	697, 704, 624, 623, 698, 624, 623, 699, 
	624, 623, 700, 624, 623, 701, 624, 623, 
	702, 624, 623, 703, 624, 623, 692, 624, 
	623, 705, 624, 623, 706, 624, 623, 707, 
	624, 623, 708, 624, 623, 709, 624, 623, 
	710, 624, 623, 711, 624, 623, 712, 624, 
	623, 659, 624, 623, 714, 719, 624, 623, 
	715, 624, 623, 716, 624, 623, 717, 624, 
	623, 718, 624, 623, 688, 624, 623, 720, 
	751, 624, 623, 721, 624, 623, 722, 624, 
	623, 723, 624, 623, 724, 624, 623, 725, 
	624, 623, 726, 624, 623, 727, 624, 623, 
	728, 624, 623, 729, 624, 623, 730, 624, 
	623, 731, 624, 623, 732, 624, 623, 733, 
	624, 623, 734, 624, 623, 624, 735, 623, 
	736, 624, 623, 737, 624, 623, 738, 624, 
	623, 739, 624, 623, 740, 624, 623, 741, 
	624, 623, 742, 624, 623, 743, 624, 623, 
	744, 624, 623, 745, 624, 623, 746, 624, 
	623, 747, 624, 623, 748, 624, 623, 749, 
	624, 623, 750, 624, 623, 688, 624, 623, 
	752, 624, 623, 753, 624, 623, 754, 624, 
	623, 755, 624, 623, 756, 624, 623, 757, 
	624, 623, 758, 624, 623, 759, 624, 623, 
	760, 624, 623, 761, 624, 623, 762, 624, 
	623, 659, 624, 623, 764, 624, 623, 765, 
	624, 623, 766, 624, 623, 767, 624, 623, 
	768, 624, 623, 769, 624, 623, 770, 624, 
	623, 771, 624, 623, 772, 624, 623, 773, 
	624, 623, 774, 624, 623, 775, 624, 623, 
	776, 624, 623, 777, 624, 623, 778, 624, 
	623, 779, 624, 623, 780, 624, 623, 672, 
	624, 623, 624, 782, 623, 624, 783, 623, 
	624, 784, 623, 624, 785, 623, 624, 786, 
	623, 624, 787, 623, 624, 788, 623, 624, 
	789, 623, 624, 790, 623, 624, 791, 623, 
	624, 792, 623, 624, 793, 623, 624, 794, 
	623, 624, 10, 623, 796, 803, 0, 797, 
	0, 798, 0, 799, 0, 800, 0, 801, 
	0, 802, 0, 239, 0, 804, 835, 0, 
	805, 0, 806, 0, 807, 0, 808, 0, 
	809, 0, 810, 0, 811, 0, 812, 0, 
	813, 0, 814, 0, 815, 0, 816, 0, 
	817, 0, 818, 0, 819, 0, 820, 0, 
	821, 0, 822, 0, 823, 0, 824, 0, 
	825, 0, 826, 0, 827, 0, 828, 0, 
	829, 0, 830, 0, 831, 0, 832, 0, 
	833, 0, 834, 0, 801, 0, 836, 0, 
	837, 0, 838, 0, 839, 0, 840, 0, 
	841, 0, 842, 0, 843, 0, 844, 0, 
	845, 0, 846, 848, 0, 847, 0, 622, 
	0, 849, 0, 569, 0, 851, 0, 852, 
	0, 853, 0, 854, 0, 855, 0, 856, 
	0, 857, 0, 858, 0, 859, 0, 860, 
	0, 861, 0, 862, 0, 863, 0, 864, 
	0, 865, 0, 866, 0, 867, 0, 362, 
	0, 869, 0, 10, 0, 0, 0
]

class << self
	attr_accessor :_lexer_trans_actions
	private :_lexer_trans_actions, :_lexer_trans_actions=
end
self._lexer_trans_actions = [
	25, 0, 47, 0, 3, 1, 0, 25, 
	1, 31, 0, 39, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	39, 50, 99, 19, 0, 25, 47, 0, 
	3, 1, 0, 25, 1, 31, 0, 39, 
	0, 39, 0, 39, 47, 0, 0, 39, 
	119, 41, 41, 41, 5, 111, 29, 29, 
	29, 0, 111, 29, 29, 29, 0, 111, 
	29, 0, 29, 0, 95, 7, 7, 39, 
	47, 0, 0, 39, 103, 21, 0, 47, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 39, 39, 39, 
	39, 0, 23, 107, 23, 23, 44, 23, 
	0, 47, 0, 1, 0, 39, 0, 0, 
	0, 39, 47, 33, 33, 80, 33, 33, 
	39, 0, 35, 0, 39, 0, 0, 47, 
	0, 0, 35, 0, 0, 89, 47, 0, 
	86, 83, 37, 89, 83, 92, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 0, 0, 39, 0, 39, 
	0, 0, 39, 0, 39, 0, 39, 0, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 124, 
	50, 47, 0, 77, 47, 0, 65, 29, 
	77, 65, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 47, 11, 0, 56, 115, 
	27, 53, 50, 27, 56, 50, 59, 27, 
	39, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 0, 0, 47, 
	0, 0, 47, 0, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	11, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 47, 11, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	47, 0, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 11, 0, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 124, 50, 47, 
	0, 77, 47, 0, 71, 29, 77, 71, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 47, 15, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 15, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 47, 
	15, 0, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 15, 0, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 124, 50, 47, 
	0, 77, 47, 0, 62, 29, 62, 0, 
	0, 0, 0, 0, 0, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 47, 9, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 9, 0, 
	0, 47, 0, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 47, 0, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	9, 0, 0, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 0, 39, 0, 39, 
	0, 39, 124, 50, 47, 0, 77, 47, 
	0, 74, 74, 0, 0, 0, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 47, 17, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 124, 
	50, 47, 0, 77, 47, 0, 68, 29, 
	77, 68, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 47, 13, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 0, 0, 47, 0, 0, 47, 
	0, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 13, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 47, 
	13, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 47, 0, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 0, 0, 47, 0, 0, 47, 
	0, 0, 47, 0, 0, 47, 0, 0, 
	47, 0, 0, 47, 0, 0, 47, 0, 
	0, 47, 13, 0, 0, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 39, 0, 39, 0, 39, 
	0, 39, 0, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 39, 0, 
	39, 0, 39, 0, 39, 0, 0
]

class << self
	attr_accessor :_lexer_eof_actions
	private :_lexer_eof_actions, :_lexer_eof_actions=
end
self._lexer_eof_actions = [
	0, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39
]

class << self
	attr_accessor :lexer_start
end
self.lexer_start = 1;
class << self
	attr_accessor :lexer_first_final
end
self.lexer_first_final = 870;
class << self
	attr_accessor :lexer_error
end
self.lexer_error = 0;

class << self
	attr_accessor :lexer_en_main
end
self.lexer_en_main = 1;


# line 121 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
      end
 
      def scan(data)
        data = (data + "\n%_FEATURE_END_%").unpack("c*") # Explicit EOF simplifies things considerably
        eof = pe = data.length
 
        @line_number = 1
        @last_newline = 0
 
        
# line 1529 "lib/gherkin/rb_lexer/sr_cyrl.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = lexer_start
end

# line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
        
# line 1538 "lib/gherkin/rb_lexer/sr_cyrl.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _lexer_key_offsets[cs]
	_trans = _lexer_index_offsets[cs]
	_klen = _lexer_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _lexer_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _lexer_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _lexer_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _lexer_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _lexer_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	cs = _lexer_trans_targs[_trans]
	if _lexer_trans_actions[_trans] != 0
		_acts = _lexer_trans_actions[_trans]
		_nacts = _lexer_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _lexer_actions[_acts - 1]
when 0 then
# line 9 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @content_start = p
          @current_line = @line_number
          @start_col = p - @last_newline - "#{@keyword}:".length
        		end
when 1 then
# line 15 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @current_line = @line_number
          @start_col = p - @last_newline
        		end
when 2 then
# line 20 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @content_start = p
        		end
when 3 then
# line 24 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          con = unindent(@start_col, utf8_pack(data[@content_start...@next_keyword_start-1]).sub(/(\r?\n)?([\t ])*\Z/, '').gsub(/\\"\\"\\"/, '"""'))
          @listener.doc_string(con, @current_line) 
        		end
when 4 then
# line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = store_keyword_content(:feature, data, p, eof)
        		end
when 5 then
# line 33 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = store_keyword_content(:background, data, p, eof)
        		end
when 6 then
# line 37 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = store_keyword_content(:scenario, data, p, eof)
        		end
when 7 then
# line 41 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = store_keyword_content(:scenario_outline, data, p, eof)
        		end
when 8 then
# line 45 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = store_keyword_content(:examples, data, p, eof)
        		end
when 9 then
# line 49 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.step(@keyword, con, @current_line)
        		end
when 10 then
# line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.comment(con, @line_number)
          @keyword_start = nil
        		end
when 11 then
# line 60 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          @listener.tag(con, @current_line)
          @keyword_start = nil
        		end
when 12 then
# line 66 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @line_number += 1
        		end
when 13 then
# line 70 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @last_newline = p + 1
        		end
when 14 then
# line 74 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @keyword_start ||= p
        		end
when 15 then
# line 78 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @keyword = utf8_pack(data[@keyword_start...p]).sub(/:$/,'')
          @keyword_start = nil
        		end
when 16 then
# line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @next_keyword_start = p
        		end
when 17 then
# line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          p = p - 1
          current_row = []
          @current_line = @line_number
        		end
when 18 then
# line 93 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @content_start = p
        		end
when 19 then
# line 97 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          con = utf8_pack(data[@content_start...p]).strip
          current_row << con.gsub(/\\\|/, "|").gsub(/\\n/, "\n").gsub(/\\\\/, "\\")
        		end
when 20 then
# line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          @listener.row(current_row, @current_line)
        		end
when 21 then
# line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1768 "lib/gherkin/rb_lexer/sr_cyrl.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _lexer_eof_actions[cs]
	__nacts =  _lexer_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _lexer_actions[__acts - 1]
when 21 then
# line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
		begin

          if cs < lexer_first_final
            content = current_line_content(data, p)
            raise Gherkin::Lexer::LexingError.new("Lexing error on line %d: '%s'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information." % [@line_number, content])
          else
            @listener.eof
          end
        		end
# line 1807 "lib/gherkin/rb_lexer/sr_cyrl.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 132 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/sr_cyrl.rb.rl"
      end

      def unindent(startcol, text)
        text.gsub(/^[\t ]{0,#{startcol}}/, "")
      end

      def store_keyword_content(event, data, p, eof)
        end_point = (!@next_keyword_start or (p == eof)) ? p : @next_keyword_start
        content = unindent(@start_col + 2, utf8_pack(data[@content_start...end_point])).rstrip
        content_lines = content.split("\n")
        name = content_lines.shift || ""
        name.strip!
        description = content_lines.join("\n")
        @listener.__send__(event, @keyword, name, description, @current_line)
        @next_keyword_start ? @next_keyword_start - 1 : p
      ensure
        @next_keyword_start = nil
      end
      
      def current_line_content(data, p)
        rest = data[@last_newline..-1]
        utf8_pack(rest[0..rest.index(10)||-1]).strip # 10 is \n
      end

      if (RUBY_VERSION =~ /^1\.9/)
        def utf8_pack(array)
          array.pack("c*").force_encoding("UTF-8")
        end
      else
        def utf8_pack(array)
          array.pack("c*")
        end
      end
    end
  end
end
