= Simple Inflector for I18n

<b>i18n-inflector version <tt>2.6</tt></b> (<b><tt>Madonna</tt></b>)



* https://rubygems.org/gems/i18n-inflector
* https://github.com/siefca/i18n-inflector/tree
* mailto:pw@gnu.org


== Features

* Inline inflection using patterns in translation data.
* Key-based inflection using individual inflection keys.
* Definable inflection kinds and tokens.
* Easy to use public API for inflection data.
* Configurable using special scope of translation data.
* Lazily evaluated Proc and Method objects as inflection options.
* Complex patterns support; inflection by more than one kind at a time.
* Negative matching, aliases, default tokens, token groups and more…

== Description

This library contains a backend module for I18n that adds some extra
functionality to standard backend. It overwrites the translate method
so that it will interpolate additional inflection tokens present in
translations. These tokens may appear in *patterns* which are contained
within <tt>@{</tt> and <tt>}</tt> symbols. Configuration is stored
also in translation data, in a scope <tt><locale>.i18n.inflections</tt>,
where <tt>locale</tt> is a locale subtree.

You can create your own inflection kinds (gender, title, person, time, author, etc.)
of tokens to group them in a meaningful, semantical sets. That means you can
apply Inflector to do simple inflection by a gender or a person, when some
language requires it.

It adds the +inflector+ object to the default backend so you can use many
methods for accessing loaded inflection data at runtime, or to set up global
switches that are controlling the engine.

Example translation data:

  en:
    i18n:
      inflections:
        gender:
          f:        "female"
          m:        "male"
          n:        "neuter"
          female:   @f
          male:     @m
          default:  n
        
      
    welcome:  "Dear @{f:Lady|m:Sir|n:You|All}!"
    
    @same_but_as_key:
      f:        "Lady"
      m:        "Sir"
      n:        "You"
      @prefix:  "Dear "
      @suffix:  "!"
      @free:    "All"
      
=== Note about YAML parsing

The example above is not compatible with Psych parser, which is used
by Rails 3. There are two ways to solve that problem.

First is to change a YAML file and replace any value that has
special meaning with a symbol:

  en:
    i18n:
      inflections:
        gender:
          f:        "female"
          m:        "male"
          n:        "neuter"
          female:   :@f
          male:     :@m
          default:  :n
  
Second way is to use other parser by adding to +config/boot.rb+:

  require 'yaml'
  YAML::ENGINE.yamler = 'syck'

== New features

From version 2.1.0 the Inflector supports so called named patterns,
which can be used if there is a need to be strict and/or to
use the same token names but assigned to different kinds. Example:

   welcome:  "Dear @gender{f:Lady|m:Sir|n:You|All}"

From version 2.2.0 the Inflector supports complex patterns,
which can be used to inflect some sentence or a word by more
than a one kind. That might be very helpful for highly inflected
languages. An example pattern:

  welcome:  "Dear @gender+number{f+s:Lady|f+p:Ladies|m+s:Sir|m+p:Gentlemen|All}"

== Why?

It's intended to be used in a web projects or other projects where
translations are performed by many people, yet there is a need to
inflect sentences with some external variables.

To achieve similar functionality lambdas can be used but including
Proc objects in translations might be considered unsafe or memory
consuming.

If you have a troop of happy translators that shouldn't have the
ability to execute any code yet you need some simple inflection
then this module might help you.

See i18n-inflector-rails[https://rubygems.org/gems/i18n-inflector-rails] if
you need Rails integration.

== Requirements

* i18n[https://rubygems.org/gems/i18n]
* rake[https://rubygems.org/gems/rake]
* rubygems[http://docs.rubygems.org/]

== Download

==== Source code

* https://github.com/siefca/i18n-inflector/tree
* <tt>git clone git://github.com/siefca/i18n-inflector.git</tt>

==== Gem

* https://rubygems.org/gems/i18n-inflector

== Installation

* <tt>gem install i18n-inflector</tt>

== Synopsis

  require 'i18n-inflector'
  i18n.translate('welcome')

Detailed example:

<b>YAML:</b>

  en:
    i18n:
      inflections:
        gender:
          f:        "female"
          m:        "male"
          n:        "neuter"
          o:        "other"
          default:  n
   
    welcome:  "Dear @{f:Lady|m:Sir|n:You|All}"

<b>Code:</b>

   I18n.t('welcome')
   # => "Dear You"
   
   I18n.t('welcome', :gender => :m)
   # => "Dear Sir"
   
   I18n.t('welcome', :gender => :unknown)
   # => "Dear You"
   
   I18n.inflector.options.unknown_defaults = false
   I18n.t('welcome', :gender => :unknown)
   # => "Dear All"
   
   I18n.t('welcome', :gender => :o)
   # => "Dear All"

   I18n.inflector.options.excluded_defaults = true
   I18n.t('welcome', :gender => :o)
   # => "Dear You"

== More information

* See {file:docs/USAGE} for detailed information about the usage.
* See {I18n::Inflector::API} class documentation for detailed information about the API.
* See {I18n::Backend::Inflector} module documentation for detailed information about the internals.
* See {whole documentation}[http://rubydoc.info/gems/i18n-inflector/] to browse all documents.

== Tests

You can run tests both with

* <tt>rake test</tt> or just <tt>rake</tt>
* run a test file directly, e.g. <tt>ruby -Ilib -Itest test/inflector_test.rb</tt>
* run <tt>rake testv4</tt> to test with version 4 of I18n

== Common rake tasks

* <tt>rake bundler:gemfile</tt> – regenerate the +Gemfile+
* <tt>rake docs</tt> – render the documentation (output in the subdirectory directory +doc+)
* <tt>rake gem</tt> – builds package (output in the subdirectory +pkg+)
* <tt>rake test</tt>, <tt>rake testv4</tt> – performs tests
* <tt>rake Manifest.txt</tt> – regenerates the +Manifest.txt+ file
* <tt>rake ChangeLog</tt> – regenerates the +ChangeLog+ file

== Credits

{Heise Media Polska}[http://www.heise-online.pl/] supports Free Software and has
contributed to this library by paying for me to eat when I've been coding.

== License

Copyright (c) 2011 by Paweł Wilk.

i18n-inflector is copyrighted software owned by Paweł Wilk (pw@gnu.org).
You may redistribute and/or modify this software as long as you
comply with either the terms of the LGPL (see {file:docs/LGPL}),
or Ruby's license (see {file:docs/COPYING}).

THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE.
