# Copyright (c) 2005 Zed A. Shaw
# You can redistribute it and/or modify it under the same terms as Ruby.
#
# Additional work donated by contributors.  See http://mongrel.rubyforge.org/attributions.html
# for more information.

require 'yaml'
require 'etc'

$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../lib"
require 'mongrel'
require 'mongrel/rails'

Mongrel::Gems.require 'gem_plugin'

# require 'ruby-debug'
# Debugger.start

module Mongrel
  class Start < GemPlugin::Plugin "/commands"
    include Mongrel::Command::Base

    def configure
      options [
        ["-e", "--environment ENV", "Rails environment to run as", :@environment, ENV['RAILS_ENV'] || "development"],
        ["-d", "--daemonize", "Run daemonized in the background", :@daemon, false],
        ['-p', '--port PORT', "Which port to bind to", :@port, 3000],
        ['-a', '--address ADDR', "Address to bind to", :@address, "0.0.0.0"],
        ['-l', '--log FILE', "Where to write log messages", :@log_file, "log/mongrel.log"],
        ['-P', '--pid FILE', "Where to write the PID", :@pid_file, "log/mongrel.pid"],
        ['-n', '--num-processors INT', "Number of processors active before clients denied", :@num_processors, 1024],
        ['-o', '--timeout TIME', "Time to wait (in seconds) before killing a stalled thread", :@timeout, 60],
        ['-t', '--throttle TIME', "Time to pause (in hundredths of a second) between accepting clients", :@throttle, 0],
        ['-m', '--mime PATH', "A YAML file that lists additional MIME types", :@mime_map, nil],
        ['-c', '--chdir PATH', "Change to dir before starting (will be expanded)", :@cwd, Dir.pwd],
        ['-r', '--root PATH', "Set the document root (default 'public')", :@docroot, "public"],
        ['-B', '--debug', "Enable debugging mode", :@debug, false],
        ['-C', '--config PATH', "Use a config file", :@config_file, nil],
        ['-S', '--script PATH', "Load the given file as an extra config script", :@config_script, nil],
        ['-G', '--generate PATH', "Generate a config file for use with -C", :@generate, nil],
        ['', '--user USER', "User to run as", :@user, nil],
        ['', '--group GROUP', "Group to run as", :@group, nil],
        ['', '--prefix PATH', "URL prefix for Rails app", :@prefix, nil]
      ]
    end

    def validate
      if @config_file
        valid_exists?(@config_file, "Config file not there: #@config_file")
        return false unless @valid
        @config_file = File.expand_path(@config_file)
        load_config
        return false unless @valid
      end

      @cwd = File.expand_path(@cwd)
      valid_dir? @cwd, "Invalid path to change to during daemon mode: #@cwd"

      # Change there to start, then we'll have to come back after daemonize
      Dir.chdir(@cwd)

      valid?(@prefix[0] == ?/ && @prefix[-1] != ?/, "Prefix must begin with / and not end in /") if @prefix
      valid_dir? File.dirname(@log_file), "Path to log file not valid: #@log_file"
      valid_dir? File.dirname(@pid_file), "Path to pid file not valid: #@pid_file"
      valid_dir? @docroot, "Path to docroot not valid: #@docroot"
      valid_exists? @mime_map, "MIME mapping file does not exist: #@mime_map" if @mime_map
      valid_exists? @config_file, "Config file not there: #@config_file" if @config_file
      valid_dir? File.dirname(@generate), "Problem accessing directory to #@generate" if @generate
      valid_user? @user if @user
      valid_group? @group if @group

      return @valid
    end

    def run
      if @generate
	@generate = File.expand_path(@generate)
        STDERR.puts "** Writing config to \"#@generate\"."
        open(@generate, "w") {|f| f.write(settings.to_yaml) }
        STDERR.puts "** Finished.  Run \"mongrel_rails start -C #@generate\" to use the config file."
        exit 0
      end

      config = Mongrel::Rails::RailsConfigurator.new(settings) do
        if defaults[:daemon]
          if File.exist? defaults[:pid_file]
            log "!!! PID file #{defaults[:pid_file]} already exists.  Mongrel could be running already.  Check your #{defaults[:log_file]} for errors."
            log "!!! Exiting with error.  You must stop mongrel and clear the .pid before I'll attempt a start."
            exit 1
          end

          daemonize
          log "Daemonized, any open files are closed.  Look at #{defaults[:pid_file]} and #{defaults[:log_file]} for info."
          log "Settings loaded from #{@config_file} (they override command line)." if @config_file
        end

        log "Starting Mongrel listening at #{defaults[:host]}:#{defaults[:port]}"

        listener do
          mime = {}
          if defaults[:mime_map]
            log "Loading additional MIME types from #{defaults[:mime_map]}"
            mime = load_mime_map(defaults[:mime_map], mime)
          end

          if defaults[:debug]
            log "Installing debugging prefixed filters. Look in log/mongrel_debug for the files."
            debug "/"
          end

          log "Starting Rails with #{defaults[:environment]} environment..."
          log "Mounting Rails at #{defaults[:prefix]}..." if defaults[:prefix]
          uri defaults[:prefix] || "/", :handler => rails(:mime => mime, :prefix => defaults[:prefix])
          log "Rails loaded."

          log "Loading any Rails specific GemPlugins"
          load_plugins

          if defaults[:config_script]
            log "Loading #{defaults[:config_script]} external config script"
            run_config(defaults[:config_script])
          end

          setup_rails_signals
        end
      end

      config.run
      config.log "Mongrel #{Mongrel::Const::MONGREL_VERSION} available at #{@address}:#{@port}"

      if config.defaults[:daemon]
        config.write_pid_file
      else
        config.log "Use CTRL-C to stop." 
      end

      config.join

      if config.needs_restart
        if RUBY_PLATFORM !~ /mswin/
          cmd = "ruby #{__FILE__} start #{original_args.join(' ')}"
          config.log "Restarting with arguments:  #{cmd}"
          config.stop(false, true)
          config.remove_pid_file

          if config.defaults[:daemon]
            system cmd
          else
            STDERR.puts "Can't restart unless in daemon mode."
            exit 1
          end
        else
          config.log "Win32 does not support restarts. Exiting."
        end
      end
    end

    def load_config
      settings = {}
      begin
        settings = YAML.load_file(@config_file)
      ensure
        STDERR.puts "** Loading settings from #{@config_file} (they override command line)." unless @daemon || settings[:daemon] 
      end

      settings[:includes] ||= ["mongrel"]

      # Config file settings will override command line settings
      settings.each do |key, value|
        key = key.to_s
        if config_keys.include?(key)
          key = 'address' if key == 'host'
          self.instance_variable_set("@#{key}", value)
        else
          failure "Unknown configuration setting: #{key}"  
          @valid = false
        end
      end
    end

    def config_keys
      @config_keys ||=
        %w(address host port cwd log_file pid_file environment docroot mime_map daemon debug includes config_script num_processors timeout throttle user group prefix)
    end

    def settings
      config_keys.inject({}) do |hash, key|
        value = self.instance_variable_get("@#{key}")
        key = 'host' if key == 'address'
        hash[key.to_sym] ||= value
        hash
      end
    end
  end

  def Mongrel::send_signal(signal, pid_file)
    pid = open(pid_file).read.to_i
    print "Sending #{signal} to Mongrel at PID #{pid}..."
    begin
      Process.kill(signal, pid)
    rescue Errno::ESRCH
      puts "Process does not exist.  Not running."
    end

    puts "Done."
  end


  class Stop < GemPlugin::Plugin "/commands"
    include Mongrel::Command::Base

    def configure 
      options [ 
        ['-c', '--chdir PATH', "Change to dir before starting (will be expanded).", :@cwd, "."],
        ['-f', '--force', "Force the shutdown (kill -9).", :@force, false],
        ['-w', '--wait SECONDS', "Wait SECONDS before forcing shutdown", :@wait, "0"], 
        ['-P', '--pid FILE', "Where the PID file is located.", :@pid_file, "log/mongrel.pid"]
      ]
    end

    def validate
      @cwd = File.expand_path(@cwd)
      valid_dir? @cwd, "Invalid path to change to during daemon mode: #@cwd"

      Dir.chdir @cwd

      valid_exists? @pid_file, "PID file #@pid_file does not exist.  Not running?"
      return @valid
    end

    def run
      if @force
        @wait.to_i.times do |waiting|
          exit(0) if not File.exist? @pid_file
          sleep 1
        end

        Mongrel::send_signal("KILL", @pid_file) if File.exist? @pid_file
      else
        Mongrel::send_signal("TERM", @pid_file)
      end
    end
  end


  class Restart < GemPlugin::Plugin "/commands"
    include Mongrel::Command::Base

    def configure 
      options [ 
        ['-c', '--chdir PATH', "Change to dir before starting (will be expanded)", :@cwd, '.'],
        ['-s', '--soft', "Do a soft restart rather than a process exit restart", :@soft, false],
        ['-P', '--pid FILE', "Where the PID file is located", :@pid_file, "log/mongrel.pid"]
      ]
    end

    def validate
      @cwd = File.expand_path(@cwd)
      valid_dir? @cwd, "Invalid path to change to during daemon mode: #@cwd"

      Dir.chdir @cwd

      valid_exists? @pid_file, "PID file #@pid_file does not exist.  Not running?"
      return @valid
    end

    def run
      if @soft
        Mongrel::send_signal("HUP", @pid_file)
      else
        Mongrel::send_signal("USR2", @pid_file)
      end
    end
  end
end


GemPlugin::Manager.instance.load "mongrel" => GemPlugin::INCLUDE, "rails" => GemPlugin::EXCLUDE


if not Mongrel::Command::Registry.instance.run ARGV
  exit 1
end
