h2. Active Record Query Interface

This guide covers different ways to retrieve data from the database using Active Record. By referring to this guide, you will be able to:

* Find records using a variety of methods and conditions
* Specify the order, retrieved attributes, grouping, and other properties of the found records
* Use eager loading to reduce the number of database queries needed for data retrieval
* Use dynamic finders methods
* Check for the existence of particular records
* Perform various calculations on Active Record models

endprologue.

WARNING. This Guide is based on Rails 3.0. Some of the code shown here will not work in other versions of Rails.

If you're used to using raw SQL to find database records then, generally, you will find that there are better ways to carry out the same operations in Rails. Active Record insulates you from the need to use SQL in most cases.

Code examples throughout this guide will refer to one or more of the following models:

TIP: All of the following models use +id+ as the primary key, unless specified otherwise.

<br />

<ruby>
class Client < ActiveRecord::Base
  has_one :address
  has_many :orders
  has_and_belongs_to_many :roles
end
</ruby>

<ruby>
class Address < ActiveRecord::Base
  belongs_to :client
end
</ruby>

<ruby>
class Order < ActiveRecord::Base
  belongs_to :client, :counter_cache => true
end
</ruby>

<ruby>
class Role < ActiveRecord::Base
  has_and_belongs_to_many :clients
end
</ruby>

Active Record will perform queries on the database for you and is compatible with most database systems (MySQL, PostgreSQL and SQLite to name a few). Regardless of which database system you're using, the Active Record method format will always be the same.

h3. Retrieving Objects from the Database

To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.

The methods are:
* +where+
* +select+
* +group+
* +order+
* +limit+
* +offset+
* +joins+
* +includes+
* +lock+
* +readonly+
* +from+
* +having+

All of the above methods return an instance of <tt>ActiveRecord::Relation</tt>.

Primary operation of <tt>Model.find(options)</tt> can be summarized as:

* Convert the supplied options to an equivalent SQL query.
* Fire the SQL query and retrieve the corresponding results from the database.
* Instantiate the equivalent Ruby object of the appropriate model for every resulting row.
* Run +after_find+ callbacks if any.

h4. Retrieving a Single Object

Active Record lets you retrieve a single object using three different ways.

h5. Using a Primary Key

Using <tt>Model.find(primary_key)</tt>, you can retrieve the object corresponding to the supplied _primary key_ and matching the supplied options (if any). For example:

<ruby>
# Find the client with primary key (id) 10.
client = Client.find(10)
=> #<Client id: 10, first_name: => "Ryan">
</ruby>

SQL equivalent of the above is:

<sql>
SELECT * FROM clients WHERE (clients.id = 10)
</sql>

<tt>Model.find(primary_key)</tt> will raise an +ActiveRecord::RecordNotFound+ exception if no matching record is found.

h5. +first+

<tt>Model.first</tt> finds the first record matched by the supplied options. For example:

<ruby>
client = Client.first
=> #<Client id: 1, first_name: "Lifo">
</ruby>

SQL equivalent of the above is:

<sql>
SELECT * FROM clients LIMIT 1
</sql>

<tt>Model.first</tt> returns +nil+ if no matching record is found. No exception will be raised.

h5. +last+

<tt>Model.last</tt> finds the last record matched by the supplied options. For example:

<ruby>
client = Client.last
=> #<Client id: 221, first_name: "Russel">
</ruby>

SQL equivalent of the above is:

<sql>
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
</sql>

<tt>Model.last</tt> returns +nil+ if no matching record is found. No exception will be raised.

h4. Retrieving Multiple Objects

h5. Using Multiple Primary Keys

<tt>Model.find(array_of_primary_key)</tt> also accepts an array of _primary keys_. An array of all the matching records for the supplied _primary keys_ is returned. For example:

<ruby>
# Find the clients with primary keys 1 and 10.
client = Client.find(1, 10) # Or even Client.find([1, 10])
=> [#<Client id: 1, first_name: => "Lifo">, #<Client id: 10, first_name: => "Ryan">]
</ruby>

SQL equivalent of the above is:

<sql>
SELECT * FROM clients WHERE (clients.id IN (1,10))
</sql>

<tt>Model.find(array_of_primary_key)</tt> will raise an +ActiveRecord::RecordNotFound+ exception unless a matching record is found for <strong>all</strong> of the supplied primary keys.

h4. Retrieving Multiple Objects in Batches

Sometimes you need to iterate over a large set of records. For example to send a newsletter to all users, to export some data, etc.

The following may seem very straight forward at first:

<ruby>
# Very inefficient when users table has thousands of rows.
User.all.each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

But if the total number of rows in the table is very large, the above approach may vary from being under performant to just plain impossible.

This is because +User.all.each+ makes Active Record fetch _the entire table_, build a model object per row, and keep the entire array in the memory. Sometimes that is just too many objects and demands too much memory.

h5. +find_each+

To efficiently iterate over a large table, Active Record provides a batch finder method called +find_each+:

<ruby>
User.find_each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Configuring the batch size*

Behind the scenes +find_each+ fetches rows in batches of +1000+ and yields them one by one. The size of the underlying batches is configurable via the +:batch_size+ option.

To fetch +User+ records in batch size of +5000+:

<ruby>
User.find_each(:batch_size => 5000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Starting batch find from a specific primary key*

Records are fetched in ascending order on the primary key, which must be an integer. The +:start+ option allows you to configure the first ID of the sequence if the lowest is not the one you need. This may be useful for example to be able to resume an interrupted batch process if it saves the last processed ID as a checkpoint.

To send newsletters only to users with the primary key starting from +2000+:

<ruby>
User.find_each(:batch_size => 5000, :start => 2000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Additional options*

+find_each+ accepts the same options as the regular +find+ method. However, +:order+ and +:limit+ are needed internally and hence not allowed to be passed explicitly.

h5. +find_in_batches+

You can also work by chunks instead of row by row using +find_in_batches+. This method is analogous to +find_each+, but it yields arrays of models instead:

<ruby>
# Works in chunks of 1000 invoices at a time.
Invoice.find_in_batches(:include => :invoice_lines) do |invoices|
  export.add_invoices(invoices)
end
</ruby>

The above will yield the supplied block with +1000+ invoices every time.

h3. Conditions

The +find+ method allows you to specify conditions to limit the records returned, representing the +WHERE+-part of the SQL statement. Conditions can either be specified as a string, array, or hash.

h4. Pure String Conditions

If you'd like to add conditions to your find, you could just specify them in there, just like +Client.where("orders_count = '2'")+. This will find all clients where the +orders_count+ field's value is 2.

WARNING: Building your own conditions as pure strings can leave you vulnerable to SQL injection exploits. For example, +Client.where("first_name LIKE '%#{params[:first_name]}%'")+ is not safe. See the next section for the preferred way to handle conditions using an array.

h4. Array Conditions

Now what if that number could vary, say as an argument from somewhere? The find then becomes something like:

<ruby>
Client.where("orders_count = ?", params[:orders])
</ruby>

Active Record will go through the first element in the conditions value and any additional elements will replace the question marks +(?)+ in the first element.

Or if you want to specify two conditions, you can do it like:

<ruby>
Client.where("orders_count = ? AND locked = ?", params[:orders], false)
</ruby>

In this example, the first question mark will be replaced with the value in +params[:orders]+ and the second will be replaced with the SQL representation of +false+, which depends on the adapter.

The reason for doing code like:

<ruby>
Client.where("orders_count = ?", params[:orders])
</ruby>

instead of:

<ruby>
Client.where("orders_count = #{params[:orders]}")
</ruby>

is because of argument safety. Putting the variable directly into the conditions string will pass the variable to the database *as-is*. This means that it will be an unescaped variable directly from a user who may have malicious intent. If you do this, you put your entire database at risk because once a user finds out he or she can exploit your database they can do just about anything to it. Never ever put your arguments directly inside the conditions string.

TIP: For more information on the dangers of SQL injection, see the "Ruby on Rails Security Guide":security.html#sql-injection.

h5. Placeholder Conditions

Similar to the +(?)+ replacement style of params, you can also specify keys/values hash in your array conditions:

<ruby>
Client.where("created_at >= :start_date AND created_at <= :end_date",
  {:start_date => params[:start_date], :end_date => params[:end_date]})
</ruby>

This makes for clearer readability if you have a large number of variable conditions.

h5(#array-range_conditions). Range Conditions

If you're looking for a range inside of a table (for example, users created in a certain timeframe) you can use the conditions option coupled with the +IN+ SQL statement for this. If you had two dates coming in from a controller you could do something like this to look for a range:

<ruby>
Client.where(:created_at => (params[:start_date].to_date)..(params[:end_date].to_date))
</ruby>

This query will generate something similar to the following SQL:

<sql>
  SELECT "clients".* FROM "clients" WHERE ("clients"."created_at" BETWEEN '2010-09-29' AND '2010-11-30')
</sql>

h4. Hash Conditions

Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. With hash conditions, you pass in a hash with keys of the fields you want conditionalised and the values of how you want to conditionalise them:

NOTE: Only equality, range and subset checking are possible with Hash conditions.

h5. Equality Conditions

<ruby>
Client.where(:locked => true)
</ruby>

The field name can also be a string:

<ruby>
Client.where('locked' => true)
</ruby>

h5(#hash-range_conditions). Range Conditions

The good thing about this is that we can pass in a range for our fields without it generating a large query as shown in the preamble of this section.

<ruby>
Client.where(:created_at => (Time.now.midnight - 1.day)..Time.now.midnight)
</ruby>

This will find all clients created yesterday by using a +BETWEEN+ SQL statement:

<sql>
SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')
</sql>

This demonstrates a shorter syntax for the examples in "Array Conditions":#array-conditions

h5. Subset Conditions

If you want to find records using the +IN+ expression you can pass an array to the conditions hash:

<ruby>
Client.where(:orders_count => [1,3,5])
</ruby>

This code will generate SQL like this:

<sql>
SELECT * FROM clients WHERE (clients.orders_count IN (1,3,5))
</sql>

h4. Ordering

To retrieve records from the database in a specific order, you can use the +order+ method.

For example, if you're getting a set of records and want to order them in ascending order by the +created_at+ field in your table:

<ruby>
Client.order("created_at")
</ruby>

You could specify +ASC+ or +DESC+ as well:

<ruby>
Client.order("created_at DESC")
# OR
Client.order("created_at ASC")
</ruby>

Or ordering by multiple fields:

<ruby>
Client.order("orders_count ASC, created_at DESC")
</ruby>

h4. Selecting Specific Fields

By default, <tt>Model.find</tt> selects all the fields from the result set using +select *+.

To select only a subset of fields from the result set, you can specify the subset via the +select+ method.

NOTE: If the +select+ method is used, all the returning objects will be "read only":#readonly-objects.

<br />

For example, to select only +viewable_by+ and +locked+ columns:

<ruby>
Client.select("viewable_by, locked")
</ruby>

The SQL query used by this find call will be somewhat like:

<sql>
SELECT viewable_by, locked FROM clients
</sql>

Be careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field that is not in the initialized record you'll receive:

<shell>
ActiveRecord::MissingAttributeError: missing attribute: <attribute>
</shell>

Where +&lt;attribute&gt;+ is the attribute you asked for. The +id+ method will not raise the +ActiveRecord::MissingAttributeError+, so just be careful when working with associations because they need the +id+ method to function properly.

You can also call SQL functions within the select option. For example, if you would like to only grab a single record per unique value in a certain field by using the +DISTINCT+ function you can do it like this:

<ruby>
Client.select("DISTINCT(name)")
</ruby>

h4. Limit and Offset

To apply +LIMIT+ to the SQL fired by the +Model.find+, you can specify the +LIMIT+ using +limit+ and +offset+ methods on the relation.

You can use +limit+ to specify the number of records to be retrieved, and use +offset+ to specify the number of records to skip before starting to return the records. For example

<ruby>
Client.limit(5)
</ruby>

will return a maximum of 5 clients and because it specifies no offset it will return the first 5 in the table. The SQL it executes looks like this:

<sql>
SELECT * FROM clients LIMIT 5
</sql>

Adding +offset+ to that

<ruby>
Client.limit(5).offset(30)
</ruby>

will return instead a maximum of 5 clients beginning with the 31st. The SQL looks like:

<sql>
SELECT * FROM clients LIMIT 5, 30
</sql>

h4. Group

To apply a +GROUP BY+ clause to the SQL fired by the finder, you can specify the +group+ method on the find.

For example, if you want to find a collection of the dates orders were created on:

<ruby>
Order.group("date(created_at)").order("created_at")
</ruby>

And this will give you a single +Order+ object for each date where there are orders in the database.

The SQL that would be executed would be something like this:

<sql>
SELECT * FROM orders GROUP BY date(created_at)
</sql>

h4. Having

SQL uses the +HAVING+ clause to specify conditions on the +GROUP BY+ fields. You can add the +HAVING+ clause to the SQL fired by the +Model.find+ by adding the +:having+ option to the find.

For example:

<ruby>
Order.group("date(created_at)").having("created_at > ?", 1.month.ago)
</ruby>

The SQL that would be executed would be something like this:

<sql>
SELECT * FROM orders GROUP BY date(created_at) HAVING created_at > '2009-01-15'
</sql>

This will return single order objects for each day, but only for the last month.

h4. Readonly Objects

Active Record provides +readonly+ method on a relation to explicitly disallow modification or deletion of any of the returned object. Any attempt to alter or destroy a readonly record will not succeed, raising an +ActiveRecord::ReadOnlyRecord+ exception.

<ruby>
client = Client.readonly.first
client.visits += 1
client.save
</ruby>

As +client+ is explicitly set to be a readonly object, the above code will raise an +ActiveRecord::ReadOnlyRecord+ exception when calling +client.save+ with an updated value of _visists_.

h4. Locking Records for Update

Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.

Active Record provides two locking mechanisms:

* Optimistic Locking
* Pessimistic Locking

h5. Optimistic Locking

Optimistic locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data.  It does this by checking whether another process has made changes to a record since it was opened. An +ActiveRecord::StaleObjectError+ exception is thrown if that has occurred and the update is ignored.

<strong>Optimistic locking column</strong>

In order to use optimistic locking, the table needs to have a column called +lock_version+. Each time the record is updated, Active Record increments the +lock_version+ column. If an update request is made with a lower value in the +lock_version+ field than is currently in the +lock_version+ column in the database, the update request will fail with an +ActiveRecord::StaleObjectError+. Example:

<ruby>
c1 = Client.find(1)
c2 = Client.find(1)

c1.first_name = "Michael"
c1.save

c2.name = "should fail"
c2.save # Raises a ActiveRecord::StaleObjectError
</ruby>

You're then responsible for dealing with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.

NOTE: You must ensure that your database schema defaults the +lock_version+ column to +0+.

<br />

This behavior can be turned off by setting <tt>ActiveRecord::Base.lock_optimistically = false</tt>.

To override the name of the +lock_version+ column, +ActiveRecord::Base+ provides a class method called +set_locking_column+:

<ruby>
class Client < ActiveRecord::Base
  set_locking_column :lock_client_column
end
</ruby>

h5. Pessimistic Locking

Pessimistic locking uses a locking mechanism provided by the underlying database. Using +lock+ when building a relation obtains an exclusive lock on the selected rows. Relations using +lock+ are usually wrapped inside a transaction for preventing deadlock conditions.

For example:

<ruby>
Item.transaction do
  i = Item.lock.first
  i.name = 'Jones'
  i.save
end
</ruby>

The above session produces the following SQL for a MySQL backend:

<sql>
SQL (0.2ms)   BEGIN
Item Load (0.3ms)   SELECT * FROM `items` LIMIT 1 FOR UPDATE
Item Update (0.4ms)   UPDATE `items` SET `updated_at` = '2009-02-07 18:05:56', `name` = 'Jones' WHERE `id` = 1
SQL (0.8ms)   COMMIT
</sql>

You can also pass raw SQL to the +lock+ method for allowing different types of locks. For example, MySQL has an expression called +LOCK IN SHARE MODE+ where you can lock a record but still allow other queries to read it. To specify this expression just pass it in as the lock option:

<ruby>
Item.transaction do
  i = Item.lock("LOCK IN SHARE MODE").find(1)
  i.increment!(:views)
end
</ruby>

h3. Joining Tables

Active Record provides a finder method called +joins+ for specifying +JOIN+ clauses on the resulting SQL. There are multiple ways to use the +joins+ method.

h4. Using a String SQL Fragment

You can just supply the raw SQL specifying the +JOIN+ clause to +joins+:

<ruby>
Client.joins('LEFT OUTER JOIN addresses ON addresses.client_id = clients.id')
</ruby>

This will result in the following SQL:

<sql>
SELECT clients.* FROM clients LEFT OUTER JOIN addresses ON addresses.client_id = clients.id
</sql>

h4. Using Array/Hash of Named Associations

WARNING: This method only works with +INNER JOIN+,

<br />

Active Record lets you use the names of the "associations":association_basics.html defined on the model as a shortcut for specifying +JOIN+ clause for those associations when using the +joins+ method.

For example, consider the following +Category+, +Post+, +Comments+ and +Guest+ models:

<ruby>
class Category < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :category
  has_many :comments
  has_many :tags
end

class Comments < ActiveRecord::Base
  belongs_to :post
  has_one :guest
end

class Guest < ActiveRecord::Base
  belongs_to :comment
end
</ruby>

Now all of the following will produce the expected join queries using +INNER JOIN+:

h5. Joining a Single Association

<ruby>
Category.joins(:posts)
</ruby>

This produces:

<sql>
SELECT categories.* FROM categories
  INNER JOIN posts ON posts.category_id = categories.id
</sql>

h5. Joining Multiple Associations

<ruby>
Post.joins(:category, :comments)
</ruby>

This produces:

<sql>
SELECT posts.* FROM posts
  INNER JOIN categories ON posts.category_id = categories.id
  INNER JOIN comments ON comments.post_id = posts.id
</sql>

h5. Joining Nested Associations (Single Level)

<ruby>
Post.joins(:comments => :guest)
</ruby>

h5. Joining Nested Associations (Multiple Level)

<ruby>
Category.joins(:posts => [{:comments => :guest}, :tags])
</ruby>

h4. Specifying Conditions on the Joined Tables

You can specify conditions on the joined tables using the regular "Array":#array-conditions and "String":#pure-string-conditions conditions. "Hash conditions":#hash-conditions provides a special syntax for specifying conditions for the joined tables:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.joins(:orders).where('orders.created_at' => time_range)
</ruby>

An alternative and cleaner syntax is to nest the hash conditions:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.joins(:orders).where(:orders => {:created_at => time_range})
</ruby>

This will find all clients who have orders that were created yesterday, again using a +BETWEEN+ SQL expression.

h3. Eager Loading Associations

Eager loading is the mechanism for loading the associated records of the objects returned by +Model.find+ using as few queries as possible.

<strong>N <plus> 1 queries problem</strong>

Consider the following code, which finds 10 clients and prints their postcodes:

<ruby>
clients = Client.all(:limit => 10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 ( to find 10 clients ) <plus> 10 ( one per each client to load the address ) = <strong>11</strong> queries in total.

<strong>Solution to N <plus> 1 queries problem</strong>

Active Record lets you specify in advance all the associations that are going to be loaded. This is possible by specifying the +includes+ method of the +Model.find+ call. With +includes+, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

Revisiting the above case, we could rewrite +Client.all+ to use eager load addresses:

<ruby>
clients = Client.includes(:address).limit(10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

The above code will execute just <strong>2</strong> queries, as opposed to <strong>11</strong> queries in the previous case:

<sql>
SELECT * FROM clients LIMIT 10
SELECT addresses.* FROM addresses
  WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))
</sql>

h4. Eager Loading Multiple Associations

Active Record lets you eager load any number of associations with a single +Model.find+ call by using an array, hash, or a nested hash of array/hash with the +includes+ method.

h5. Array of Multiple Associations

<ruby>
Post.includes(:category, :comments)
</ruby>

This loads all the posts and the associated category and comments for each post.

h5. Nested Associations Hash

<ruby>
Category.includes(:posts => [{:comments => :guest}, :tags]).find(1)
</ruby>

This will find the category with id 1 and eager load all of the associated posts, the associated posts' tags and comments, and every comment's guest association.

h4. Specifying Conditions on Eager Loaded Associations

Even though Active Record lets you specify conditions on the eager loaded associations just like +joins+, the recommended way is to use "joins":#joining-tables instead.

h3. Dynamic Finders

For every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called +first_name+ on your +Client+ model for example, you get +find_by_first_name+ and +find_all_by_first_name+ for free from Active Record. If you have also have a +locked+ field on the +Client+ model, you also get +find_by_locked+ and +find_all_by_locked+.

You can do +find_last_by_*+ methods too which will find the last record matching your argument.

You can specify an exclamation point (<tt>!</tt>) on the end of the dynamic finders to get them to raise an +ActiveRecord::RecordNotFound+ error if they do not return any records, like +Client.find_by_name!("Ryan")+

If you want to find both by name and locked, you can chain these finders together by simply typing +and+ between the fields for example +Client.find_by_first_name_and_locked("Ryan", true)+.


There's another set of dynamic finders that let you find or create/initialize objects if they aren't found. These work in a similar fashion to the other finders and can be used like +find_or_create_by_first_name(params[:first_name])+. Using this will first perform a find and then create if the find returns +nil+. The SQL looks like this for +Client.find_or_create_by_first_name("Ryan")+:

<sql>
SELECT * FROM clients WHERE (clients.first_name = 'Ryan') LIMIT 1
BEGIN
INSERT INTO clients (first_name, updated_at, created_at, orders_count, locked)
  VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')
COMMIT
</sql>

+find_or_create+'s sibling, +find_or_initialize+, will find an object and if it does not exist will act similarly to calling +new+ with the arguments you passed in. For example:

<ruby>
client = Client.find_or_initialize_by_first_name('Ryan')
</ruby>

will either assign an existing client object with the name "Ryan" to the client local variable, or initialize a new object similar to calling +Client.new(:first_name => 'Ryan')+. From here, you can modify other fields in client by calling the attribute setters on it: +client.locked = true+ and when you want to write it to the database just call +save+ on it.

h3. Finding by SQL

If you'd like to use your own SQL to find records in a table you can use +find_by_sql+. The +find_by_sql+ method will return an array of objects even if the underlying query returns just a single record. For example you could run this query:

<ruby>
Client.find_by_sql("SELECT * FROM clients
  INNER JOIN orders ON clients.id = orders.client_id
  ORDER clients.created_at desc")
</ruby>

+find_by_sql+ provides you with a simple way of making custom calls to the database and retrieving instantiated objects.

h3. +select_all+

<tt>find_by_sql</tt> has a close relative called +connection#select_all+. +select_all+ will retrieve objects from the database using custom SQL just like +find_by_sql+ but will not instantiate them. Instead, you will get an array of hashes where each hash indicates a record.

<ruby>
Client.connection.select_all("SELECT * FROM clients WHERE id = '1'")
</ruby>

h3. Existence of Objects

If you simply want to check for the existence of the object there's a method called +exists?+. This method will query the database using the same query as +find+, but instead of returning an object or collection of objects it will return either +true+ or +false+.

<ruby>
Client.exists?(1)
</ruby>

The +exists?+ method also takes multiple ids, but the catch is that it will return true if any one of those records exists.

<ruby>
Client.exists?(1,2,3)
# or
Client.exists?([1,2,3])
</ruby>

It's even possible to use +exists?+ without any arguments on a model or a relation.

<ruby>
Client.where(:first_name => 'Ryan').exists?
</ruby>

The above returns +true+ if there is at least one client with the +first_name+ 'Ryan' and +false+ otherwise.

<ruby>
Client.exists?
</ruby>

The above returns +false+ if the +clients+ table is empty and +true+ otherwise.

You can also use +any?+ and +many?+ to check for existence on a model or relation.

<ruby>
# via a model
Post.any?
Post.many?

# via a named scope
Post.recent.any?
Post.recent.many?

# via a relation
Post.where(:published => true).any?
Post.where(:published => true).many?

# via an association
Post.first.categories.any?
Post.first.categories.many?
</ruby>

h3. Calculations

This section uses count as an example method in this preamble, but the options described apply to all sub-sections.

All calculation methods work directly on a model:

<ruby>
Client.count
# SELECT count(*) AS count_all FROM clients
</ruby>

Or on a relation :

<ruby>
Client.where(:first_name => 'Ryan').count
# SELECT count(*) AS count_all FROM clients WHERE (first_name = 'Ryan')
</ruby>

You can also use various finder methods on a relation for performing complex calculations:

<ruby>
Client.includes("orders").where(:first_name => 'Ryan', :orders => {:status => 'received'}).count
</ruby>

Which will execute:

<sql>
SELECT count(DISTINCT clients.id) AS count_all FROM clients
  LEFT OUTER JOIN orders ON orders.client_id = client.id WHERE
  (clients.first_name = 'Ryan' AND orders.status = 'received')
</sql>

h4. Count

If you want to see how many records are in your model's table you could call +Client.count+ and that will return the number. If you want to be more specific and find all the clients with their age present in the database you can use +Client.count(:age)+.

For options, please see the parent section, "Calculations":#calculations.

h4. Average

If you want to see the average of a certain number in one of your tables you can call the +average+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.average("orders_count")
</ruby>

This will return a number (possibly a floating point number such as 3.14159265) representing the average value in the field.

For options, please see the parent section, "Calculations":#calculations.

h4. Minimum

If you want to find the minimum value of a field in your table you can call the +minimum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.minimum("age")
</ruby>

For options, please see the parent section, "Calculations":#calculations.

h4. Maximum

If you want to find the maximum value of a field in your table you can call the +maximum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.maximum("age")
</ruby>

For options, please see the parent section, "Calculations":#calculations.

h4. Sum

If you want to find the sum of a field for all records in your table you can call the +sum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.sum("orders_count")
</ruby>

For options, please see the parent section,  "Calculations":#calculations.

h3. Changelog

* April 7, 2010: Fixed document to validate XHTML 1.0 Strict. "Jaime Iniesta":http://jaimeiniesta.com
* February 3, 2010: Update to Rails 3 by "James Miller":credits.html#bensie
* February 7, 2009: Second version by "Pratik":credits.html#lifo
* December 29 2008: Initial version by "Ryan Bigg":credits.html#radar
